%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dataflowpatterns.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: Administrator
%%CreationDate: 10/6/2012, 4:13:56 PM
%%BoundingBox: 0 0 625 269
%%HiResBoundingBox: 0 0 624.4059 268.3219
%%CropBox: 0 0 624.4059 268.3219
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1092 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-10-06T16:13:08-07:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2010"
   xmp:ModifyDate="2012-10-06T16:13:40-07:00"
   xmp:MetadataDate="2012-10-06T16:13:40-07:00"
   pdf:Producer="Microsoft® PowerPoint® 2010"
   xmpMM:DocumentID="uuid:49a108e2-7d44-42d3-870e-3b558bc3c044"
   xmpMM:InstanceID="uuid:47e7bc9b-a0d5-4ca5-b3a2-3f287f576988">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Windows User</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -268.322 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 268.322 li
624.406 268.322 li
624.406 0 li
cp
clp
gsave
-.229134 269 mo
624.771 269 li
624.771 0 li
-.229134 0 li
cp
clp
-12.2291 405 mo
707.771 405 li
707.771 0 li
-12.2291 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
397.671 262.64 mo
449.893 262.64 li
449.893 217.51 li
397.671 217.51 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.721096 .438056 .0239261 0 cmyk
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
397.671 262.64 mo
449.893 262.64 li
449.893 217.51 li
397.671 217.51 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WGJAAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 50 /two put
dup 84 /T put
def
/FontBBox {-503 -307 1240 964} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/space <1C60D8A8C9B888C146> |-
/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F1
4E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2
CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE715
28F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE0
9822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95
265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543A
B1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C
81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53D
FF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9
F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD67
9CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F
99BE2DC9C90C6E2171BED79C2858C6> |-
/T <1C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AEC72
0DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F19EB
2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD434
CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F574C
6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4E7B
6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E84766
9D322216405EAED7> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/WVTSUW+Calibri /WGJAAA+Calibri findfont ct_VMDictPut
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 17{/.notdef}rp /two 33{/.notdef}rp /T 171{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
414.951 246.14 mo
(T2)
[8.784 0 ]xsh
432.831 246.14 mo
( )sh
342.121 234.1 mo
393.891 234.1 li
393.891 227.5 li
407.101 240.7 li
393.891 253.91 li
393.891 247.3 li
342.121 247.3 li
cp
ef
0 lj
8 ml
342.121 234.1 mo
393.891 234.1 li
393.891 227.5 li
407.101 240.7 li
393.891 253.91 li
393.891 247.3 li
342.121 247.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
131.171 249.39 mo
168.671 249.39 li
168.671 225.593 li
131.171 225.593 li
cp
.721096 .438056 .0239261 0 cmyk
ef
1 lj
131.171 249.39 mo
168.671 249.39 li
168.671 225.593 li
131.171 225.593 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
140.961 243.55 mo
(T2)
[8.75999 0 ]xsh
158.841 243.55 mo
( )sh
90.7009 244.69 mo
141.198 244.69 li
141.198 230.17 li
90.7009 230.17 li
cp
ef
90.7009 244.69 mo
141.198 244.69 li
141.198 230.17 li
90.7009 230.17 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
13.5209 71.42 mo
51.0209 71.42 li
51.0209 47.623 li
13.5209 47.623 li
cp
.721096 .438056 .0239261 0 cmyk
ef
13.5209 71.42 mo
51.0209 71.42 li
51.0209 47.623 li
13.5209 47.623 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 33{/.notdef}rp /T 171{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
23.2909 65.54 mo
(T1)
[8.75999 0 ]xsh
41.1709 65.54 mo
( )sh
122.901 70.67 mo
160.401 70.67 li
160.401 46.873 li
122.901 46.873 li
cp
.721096 .438056 .0239261 0 cmyk
ef
122.901 70.67 mo
160.401 70.67 li
160.401 46.873 li
122.901 46.873 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
132.681 64.8 mo
(T2)
[8.75998 0 ]xsh
150.591 64.8 mo
( )sh
51.0259 60.02 mo
121.911 59.28 li
121.901 58.28 li
51.0159 59.02 li
cp
116.201 62.78 mo
122.901 58.77 li
116.121 54.91 li
115.881 54.78 115.571 54.86 115.441 55.1 cv
115.301 55.34 115.381 55.64 115.621 55.78 cv
121.661 59.22 li
121.651 58.35 li
115.691 61.92 li
115.451 62.06 115.371 62.37 115.511 62.6 cv
115.661 62.84 115.961 62.92 116.201 62.78 cv
cp
.740688 .455604 .0273442 0 cmyk
f
209.831 69.55 mo
247.331 69.55 li
247.331 45.753 li
209.831 45.753 li
cp
.721096 .438056 .0239261 0 cmyk
ef
209.831 69.55 mo
247.331 69.55 li
247.331 45.753 li
209.831 45.753 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
219.631 63.67 mo
(T1)
[8.75999 0 ]xsh
237.511 63.67 mo
( )sh
329.081 37.16 mo
366.581 37.16 li
366.581 13.363 li
329.081 13.363 li
cp
.721096 .438056 .0239261 0 cmyk
ef
329.081 37.16 mo
366.581 37.16 li
366.581 13.363 li
329.081 13.363 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
338.911 31.27 mo
(T2)
[8.75998 0 ]xsh
356.791 31.27 mo
( )sh
247.521 58.11 mo
328.351 26.09 li
327.981 25.16 li
247.151 57.18 li
cp
324.271 31.39 mo
329.081 25.26 li
321.371 24.08 li
321.101 24.04 320.841 24.23 320.801 24.5 cv
320.761 24.78 320.951 25.03 321.221 25.07 cv
328.091 26.12 li
327.771 25.31 li
323.481 30.78 li
323.311 30.99 323.351 31.31 323.561 31.48 cv
323.781 31.65 324.101 31.61 324.271 31.39 cv
cp
.740688 .455604 .0273442 0 cmyk
f
329.081 96.11 mo
366.581 96.11 li
366.581 72.313 li
329.081 72.313 li
cp
.721096 .438056 .0239261 0 cmyk
ef
329.081 96.11 mo
366.581 96.11 li
366.581 72.313 li
329.081 72.313 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1
F3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED3
4FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C
62BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B22
4ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248
C394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E82
7BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA8
68484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B2
7907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596
B5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB6
2C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306
FF743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA26610
7C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB15
837CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B55
55DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4
DAA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D
5285DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 32{/.notdef}rp /T 
171{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
338.911 90.24 mo
(T3)
[8.75998 0 ]xsh
356.791 90.24 mo
( )sh
247.491 57.17 mo
328.301 83.43 li
327.991 84.38 li
247.181 58.12 li
cp
323.891 78.39 mo
329.081 84.21 li
321.461 85.87 li
321.191 85.92 320.921 85.75 320.861 85.48 cv
320.811 85.21 320.981 84.95 321.251 84.89 cv
328.031 83.41 li
327.771 84.24 li
323.141 79.05 li
322.961 78.85 322.981 78.53 323.181 78.35 cv
323.391 78.16 323.701 78.18 323.891 78.39 cv
cp
.740688 .455604 .0273442 0 cmyk
f
38.4429 157.85 mo
74.4429 157.85 li
74.4429 146.848 li
38.4429 146.848 li
cp
.721096 .438056 .0239261 0 cmyk
ef
38.4429 157.85 mo
74.4429 157.85 li
74.4429 146.848 li
38.4429 146.848 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B7A9C0DCBEBE215A855C93EFC157AA5AF261BBFBE3E8
04A09AF9465EABB269449943EB324EEB5800ACED1CCB21BF9DCB81A926BACA02
DD88F59227AD25B3A22E54FA2240EA372C0342993FAE588170C634159ED1DE9B
916BE227FB90EFD300D6284B9A5E9B8EAAFF607B27B9B451F75110B6433B2BD1
E810CE5AE0BCFD4DC4960CFABBE41FE5DB4C29147C98165D845E78B7D8FD53C2
636340E0499CDA81A6570B2FA7000C8C73241803AC0F0645176A3865DD7B8ADA
9B28> |-
/X <1C60D8A8C9B7B4A13FE37E4E4AE04CF732416FFB07F139E9B6EAA7B7A06C
56BC443C8243C0872DFE8DE982665F349E067F9BCDF9A17BFCF97EA8B46B4933
95B6C89AC20C2ACC789E366FAD93C3071E155B72F03931241212B5C0D191B403
2280EB645610365C15B95D2EFE06379A73B9B2931A2D760F2D77F1F0D4D5B250
4E6CD2AAA4282B5F952495D15685BBA33CCBE04563FC243AF6735203379D1EDA
256ED162ED6E48E34CE5D89848BEEA0CFD753E753082613C45B883A7DDA26238
66FD3C8FEF001DB63359A63BFBC48DFD4D9E1D57F1A66ABB39147803190CC473
A3DB82F8DE0E20AB3D37464C54B02D48B1DF503BD5E2EA36788457810607FF07
A03016E8AA1841002139BBC107D275FB831B0A9C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 62 /greater put
dup 88 /X put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 10{/.notdef}rp /greater 
21{/.notdef}rp /T 3{/.notdef}rp /X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
48.3469 155.93 mo
(X>1)
[5.51229 5.2589 0 ]xsh
64.5469 155.93 mo
( )sh
142.941 132.24 mo
180.441 132.24 li
180.441 108.443 li
142.941 108.443 li
cp
.721096 .438056 .0239261 0 cmyk
ef
142.941 132.24 mo
180.441 132.24 li
180.441 108.443 li
142.941 108.443 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
152.751 126.38 mo
(T2)
[8.75998 0 ]xsh
170.631 126.38 mo
( )sh
74.6549 152.8 mo
142.261 121.21 li
141.831 120.3 li
74.2319 151.89 li
cp
138.501 126.75 mo
142.941 120.34 li
135.171 119.63 li
134.901 119.6 134.661 119.81 134.631 120.08 cv
134.601 120.36 134.811 120.6 135.081 120.62 cv
142.001 121.26 li
141.631 120.47 li
137.681 126.18 li
137.521 126.41 137.581 126.72 137.811 126.88 cv
138.031 127.04 138.351 126.98 138.501 126.75 cv
cp
.740688 .455604 .0273442 0 cmyk
f
140.941 196.7 mo
178.441 196.7 li
178.441 172.903 li
140.941 172.903 li
cp
.721096 .438056 .0239261 0 cmyk
ef
140.941 196.7 mo
178.441 196.7 li
178.441 172.903 li
140.941 172.903 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
150.731 190.85 mo
(T3)
[8.784 0 ]xsh
168.631 190.85 mo
( )sh
6.06887 175.39 mo
37.5689 175.39 li
37.5689 147.053 li
6.06887 147.053 li
cp
.721096 .438056 .0239261 0 cmyk
ef
6.06887 175.39 mo
37.5689 175.39 li
37.5689 147.053 li
6.06887 147.053 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [12 0 0 -12 0 0 ]msf
15.8509 165.34 mo
(T1)
[5.88 0 ]xsh
27.8509 165.34 mo
( )sh
38.4429 175.35 mo
74.4429 175.35 li
74.4429 164.348 li
38.4429 164.348 li
cp
.721096 .438056 .0239261 0 cmyk
ef
38.4429 175.35 mo
74.4429 175.35 li
74.4429 164.348 li
38.4429 164.348 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/less <1C60D8A8C9B7A9C0DC884E10B55EE8E37A7209588A7E667533FD1659C
59EE5A8649E16C9A6B3AB1D6FE6CF668C9581080527343BCB9B6C62B07028D48
B8B97177A0CF6FED3E2F2F88B539AA3E1738D62ED5E297FE94D0167169C5590D
8C5A8A31BD1EFAB8C236C0D0C9B885981FB207593DE2D2F86D30E7FBE59B8033
83105B55AC3AA1FE1D185D7696FF67D9844668B05EF69A3A4DABA3302B62E41A
99CEBAA6EA90D7C799DE8BF29AADAEBF549> |-
/equal <1C60D8A8C9B7A9C0DC8F9B7338FF6B63AA1670AFC8147E0CD433F08C
5474CAE852CF95D8BEF2933A0AC67D02F006C5EE66ED6AF10D191D0CA5E14F7D
1D5BF31125E3485CE5F272A5E1CBE632142ED17DE055EB41A08C9D91E3BBDE89
6311D75334C8FC29AB5D5A3A403F0A166D38532BF977EAA4D198B3FD9D3BC53D
D726926D4DD601386B9687A455DCF59F7A3F7C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 60 /less put
dup 61 /equal put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 8{/.notdef}rp /less 
/equal /greater 21{/.notdef}rp /T 3{/.notdef}rp /X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [10.56 0 0 -10.56 0 0 ]msf
45.7069 173.42 mo
(X<=1)
[5.51229 5.25889 5.29057 0 ]xsh
67.1869 173.42 mo
( )sh
74.5529 169.36 mo
140.091 184.09 li
139.871 185.07 li
74.3339 170.33 li
cp
135.231 179.48 mo
140.941 184.8 li
133.511 187.16 li
133.241 187.24 132.961 187.09 132.881 186.83 cv
132.791 186.57 132.941 186.29 133.201 186.2 cv
139.831 184.1 li
139.641 184.95 li
134.551 180.22 li
134.351 180.03 134.341 179.71 134.521 179.51 cv
134.711 179.31 135.031 179.3 135.231 179.48 cv
cp
.740688 .455604 .0273442 0 cmyk
f
425.771 33.98 mo
463.271 33.98 li
463.271 10.183 li
425.771 10.183 li
cp
.721096 .438056 .0239261 0 cmyk
ef
425.771 33.98 mo
463.271 33.98 li
463.271 10.183 li
425.771 10.183 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
435.611 28.1 mo
(T1)
[8.75998 0 ]xsh
453.491 28.1 mo
( )sh
554.671 57.33 mo
463.091 22.55 li
463.451 21.62 li
555.021 56.39 li
cp
550.871 51.14 mo
555.771 57.21 li
548.071 58.5 li
547.801 58.54 547.541 58.36 547.501 58.09 cv
547.451 57.81 547.641 57.56 547.911 57.51 cv
554.761 56.37 li
554.461 57.18 li
550.091 51.77 li
549.921 51.56 549.951 51.24 550.161 51.07 cv
550.381 50.9 550.691 50.93 550.871 51.14 cv
cp
.740688 .455604 .0273442 0 cmyk
f
425.771 105.98 mo
463.271 105.98 li
463.271 82.183 li
425.771 82.183 li
cp
.721096 .438056 .0239261 0 cmyk
ef
425.771 105.98 mo
463.271 105.98 li
463.271 82.183 li
425.771 82.183 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
435.611 100.1 mo
(T2)
[8.75998 0 ]xsh
453.491 100.1 mo
( )sh
554.671 57.55 mo
463.091 93.62 li
463.451 94.55 li
555.031 58.48 li
cp
550.941 63.78 mo
555.771 57.65 li
548.061 56.46 li
547.791 56.42 547.531 56.6 547.491 56.88 cv
547.451 57.15 547.631 57.41 547.911 57.45 cv
554.771 58.51 li
554.461 57.7 li
550.161 63.16 li
549.991 63.37 550.021 63.69 550.241 63.86 cv
550.461 64.03 550.771 63.99 550.941 63.78 cv
cp
.740688 .455604 .0273442 0 cmyk
f
364.271 169.18 mo
401.771 169.18 li
401.771 145.383 li
364.271 145.383 li
cp
.721096 .438056 .0239261 0 cmyk
ef
364.271 169.18 mo
401.771 169.18 li
401.771 145.383 li
364.271 145.383 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
374.101 163.32 mo
(T3)
[8.75998 0 ]xsh
391.981 163.32 mo
( )sh
209.831 131.8 mo
247.331 131.8 li
247.331 108.003 li
209.831 108.003 li
cp
.721096 .438056 .0239261 0 cmyk
ef
209.831 131.8 mo
247.331 131.8 li
247.331 108.003 li
209.831 108.003 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
219.631 125.93 mo
(T1)
[8.75999 0 ]xsh
237.511 125.93 mo
( )sh
323.471 156.4 mo
247.121 120.35 li
247.551 119.45 li
323.901 155.5 li
cp
320.171 149.94 mo
324.581 156.37 li
316.811 157.05 li
316.541 157.07 316.291 156.87 316.271 156.6 cv
316.241 156.32 316.451 156.08 316.721 156.05 cv
323.641 155.45 li
323.271 156.23 li
319.341 150.51 li
319.191 150.28 319.241 149.97 319.471 149.81 cv
319.701 149.65 320.011 149.71 320.171 149.94 cv
cp
.740688 .455604 .0273442 0 cmyk
f
209.831 203.8 mo
247.331 203.8 li
247.331 180.003 li
209.831 180.003 li
cp
.721096 .438056 .0239261 0 cmyk
ef
209.831 203.8 mo
247.331 203.8 li
247.331 180.003 li
209.831 180.003 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
219.631 197.95 mo
(T2)
[8.75999 0 ]xsh
237.511 197.95 mo
( )sh
323.471 156.33 mo
247.121 191.44 li
247.541 192.35 li
323.891 157.24 li
cp
320.101 162.76 mo
324.581 156.37 li
316.821 155.61 li
316.541 155.59 316.301 155.79 316.271 156.06 cv
316.241 156.34 316.451 156.58 316.721 156.61 cv
323.631 157.28 li
323.271 156.5 li
319.281 162.18 li
319.131 162.41 319.181 162.72 319.411 162.88 cv
319.631 163.04 319.941 162.99 320.101 162.76 cv
cp
.740688 .455604 .0273442 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A0860A05CDAB07FCC8C6F1456010984E043BC1080A8E4
004C7A6F96FF4AD7F2A4B870B666CC1C7EA11B61E750FAAE008DD2598CE85BEE
4C2722299D9BDE6BD901B361B9FFD1A74A6881105044BA6119A67BABA2C5AA34
4BC5F5DC3AF8B4A3D3F44101FD3AF23A3469D02149FFD63F48CC3EA80D9EB13A
8494F7709B008152FFA0D84385AFFDE11B5FA65E8FC9AAD2BCC7E5E382783235
F954A8738DCC9A5760FEB582741B59F3C495CA1895A9F6120A54415FC0BB4494
CFF5A03D1CB88055E001BDA6B35B19BB5CD64D26C1A126C3877F4B0A8ECE9817
BE4A2EC5FA3C6FC9FCDEF6FA038892760F02C70AC24D1AFF24D0C> |-
/five <1C60D8A8C9B7A0860A2FEF2204D5F6595F7308551A6818CDF94E88E3B
51B4BFE590C6C493EDCD8FEAF219DF0A81427DD4448B9AA3D521907C381F007F
90EAA6BC6813C5ECBAAF3D43E8D7ECD68BE462C6609F3ACF35A15EAD8FA724A3
9F8FF3985AE57C3EE7F2468EE63E1FB60462E54FAAE1AC468FACAB6388343391
78434A5708D879091BB754334B9583D4A5B182F7341B7C5532CBD4850F827BD4
7C22464ADF744DC69CDD73CE1B847A119D178326C1D936B2671B4F66DB4C82AB
BF0998D204C6B2C54A8D1373452768F53CE9B8820F53D8324A8C20B1220EC9CC
36BAB88FC34DC3CEFE67B448F164F98C88B484017D4F4837C386AA9084C55574
5CF40FCBA2F2E48A2601177A6F7710FB1E609D9618B1B59141D82B990F422233
CFE27E6C13ACAEB970E79830DB3E2D7CCF772EC4469F50BF2745AF6F98962532
A3064E83D5AB1B0D7166D20C01E1963E937E8AD71B78DC8903FAA6A9997FA20C
8> |-
/C <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D786896E
9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B191A
63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F8B
441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C6C
391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B2E
CAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E948543
DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBCC8
B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2FD9
3AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACDF5
15F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E73F
C3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B77
D4> |-
/D <1C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DBBE
2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FACE4
9220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B7E
00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E984
54C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15D9
1294CE077BD16B66305872E9E54213ED4B2F> |-
/P <1C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA1C
DE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083FA2
B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C579C
4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C1932872
FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD53
A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8EDAD
F4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DBB6
727B1AB10957F28903A4930A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 52 /four put
dup 53 /five put
dup 67 /C put
dup 68 /D put
dup 80 /P put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 
6{/.notdef}rp /less /equal /greater 4{/.notdef}rp /C /D 11{/.notdef}rp 
/P 3{/.notdef}rp /T 3{/.notdef}rp /X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
2.72287 45.53 mo
(CDP1)
[9.59409 11.0701 9.21597 0 ]xsh
41.7229 45.53 mo
( )sh
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
201.201 37.61 mo
(CDP2)
[9.60687 11.0849 9.1922 0 ]xsh
240.201 37.61 mo
( )sh
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
581.431 35.76 mo
(CDP3)
[9.59406 11.0701 9.21594 0 ]xsh
620.431 35.76 mo
( )sh
6.27487 140.14 mo
(CDP4)
[9.59409 11.0701 9.21597 0 ]xsh
45.2749 140.14 mo
( )sh
345.301 137.47 mo
(CDP5)
[9.59409 11.0701 9.21597 0 ]xsh
384.301 137.47 mo
( )sh
53.7709 57.65 mo
65.7709 57.65 li
65.7709 49.9373 li
53.7709 49.9373 li
cp
0 .490333 .803677 0 cmyk
ef
53.7709 57.65 mo
65.7709 57.65 li
65.7709 49.9373 li
53.7709 49.9373 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
69.2709 57.65 mo
81.2709 57.65 li
81.2709 49.9373 li
69.2709 49.9373 li
cp
0 .490333 .803677 0 cmyk
ef
69.2709 57.65 mo
81.2709 57.65 li
81.2709 49.9373 li
69.2709 49.9373 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
122.921 59.03 mo
121.921 58.98 li
121.881 59.98 li
122.881 60.03 li
cp
120.961 58.92 mo
119.971 58.79 li
119.851 59.79 li
120.841 59.91 li
cp
119.031 58.62 mo
118.051 58.42 li
117.841 59.4 li
118.821 59.6 li
cp
117.121 58.15 mo
116.431 57.95 li
116.201 57.87 li
115.861 58.81 li
116.151 58.91 li
116.851 59.11 li
cp
115.261 57.52 mo
114.911 57.39 li
114.381 57.15 li
113.961 58.06 li
114.571 58.33 li
114.921 58.46 li
cp
113.471 56.73 mo
113.451 56.73 li
112.621 56.27 li
112.141 57.15 li
113.041 57.63 li
113.051 57.64 li
cp
111.791 55.79 mo
110.951 55.24 li
110.411 56.08 li
111.251 56.63 li
cp
110.191 54.67 mo
109.621 54.23 li
109.441 54.07 li
108.771 54.81 li
109.011 55.03 li
109.581 55.46 li
cp
108.701 53.39 mo
108.561 53.26 li
108.041 52.7 li
107.311 53.38 li
107.881 54 li
108.031 54.13 li
cp
107.431 51.98 mo
106.841 51.19 li
106.001 51.72 li
106.041 51.79 li
106.631 52.58 li
cp
106.371 50.36 mo
106.221 50.11 li
105.971 49.57 li
105.961 49.54 li
105.031 49.89 li
105.071 49.99 li
105.361 50.6 li
105.501 50.86 li
cp
105.661 48.62 mo
105.611 48.47 li
105.491 47.91 li
105.471 47.72 li
104.481 47.86 li
104.511 48.12 li
104.651 48.75 li
104.701 48.9 li
cp
105.401 46.83 mo
105.451 46.28 li
105.431 46.36 li
105.551 45.93 li
104.581 45.68 li
104.471 46.11 li
104.461 46.14 104.451 46.17 104.451 46.19 cv
104.401 46.75 li
cp
105.891 45.15 mo
106.151 44.72 li
106.421 44.37 li
105.631 43.76 li
105.291 44.2 li
105.031 44.64 li
cp
107.051 43.66 mo
107.081 43.64 li
107.681 43.1 li
107.741 43.05 li
107.121 42.26 li
107.011 42.36 li
106.351 42.96 li
106.321 42.98 li
cp
108.511 42.46 mo
109.141 42.02 li
109.321 41.91 li
108.791 41.06 li
108.561 41.2 li
107.941 41.64 li
cp
110.151 41.4 mo
110.911 40.97 li
111.011 40.92 li
110.551 40.03 li
110.421 40.1 li
109.661 40.53 li
cp
111.901 40.47 mo
111.911 40.47 li
112.791 40.05 li
112.361 39.15 li
111.451 39.57 li
111.441 39.58 li
cp
113.691 39.66 mo
114.111 39.48 li
114.601 39.29 li
114.241 38.36 li
113.721 38.56 li
113.301 38.74 li
cp
115.521 38.94 mo
116.461 38.59 li
116.121 37.65 li
115.181 38 li
cp
117.401 38.28 mo
117.861 38.13 li
118.341 37.98 li
118.051 37.03 li
117.541 37.18 li
117.081 37.33 li
cp
119.281 37.7 mo
120.251 37.43 li
119.981 36.47 li
119.021 36.73 li
cp
121.211 37.18 mo
122.071 36.96 li
122.161 36.94 li
121.941 35.96 li
121.821 35.99 li
120.961 36.21 li
cp
123.141 36.72 mo
124.111 36.5 li
123.891 35.52 li
122.921 35.74 li
cp
125.091 36.28 mo
125.091 36.28 li
126.051 36.1 li
125.871 35.12 li
124.871 35.3 li
cp
127.041 35.92 mo
128.021 35.75 li
127.841 34.76 li
126.861 34.94 li
cp
128.991 35.6 mo
129.981 35.46 li
129.841 34.47 li
128.851 34.61 li
cp
130.971 35.32 mo
131.501 35.25 li
131.941 35.21 li
131.841 34.21 li
131.361 34.26 li
130.831 34.33 li
cp
132.941 35.1 mo
133.931 35 li
133.831 34.01 li
132.841 34.11 li
cp
134.911 34.9 mo
135.911 34.84 li
135.841 33.84 li
134.841 33.91 li
cp
136.901 34.78 mo
137.901 34.71 li
137.841 33.71 li
136.841 33.78 li
cp
138.881 34.68 mo
139.881 34.66 li
139.861 33.66 li
138.861 33.68 li
cp
140.881 34.64 mo
141.661 34.62 li
141.861 34.63 li
141.881 33.63 li
141.641 33.63 li
140.861 33.64 li
cp
142.861 34.65 mo
143.861 34.67 li
143.881 33.67 li
142.881 33.65 li
cp
144.861 34.69 mo
145.081 34.69 li
145.841 34.74 li
145.901 33.74 li
145.101 33.69 li
144.881 33.69 li
cp
146.831 34.8 mo
147.831 34.86 li
147.891 33.86 li
146.901 33.8 li
cp
148.811 34.94 mo
149.811 35.03 li
149.901 34.04 li
148.911 33.94 li
cp
150.801 35.13 mo
151.801 35.23 li
151.891 34.23 li
150.901 34.14 li
cp
152.771 35.36 mo
153.761 35.5 li
153.901 34.51 li
152.901 34.37 li
cp
154.751 35.63 mo
155.071 35.68 li
155.721 35.79 li
155.891 34.81 li
155.211 34.69 li
154.891 34.64 li
cp
156.701 35.97 mo
157.691 36.14 li
157.861 35.16 li
156.881 34.98 li
cp
158.651 36.33 mo
159.631 36.54 li
159.841 35.56 li
158.861 35.35 li
cp
160.611 36.75 mo
161.241 36.89 li
161.561 36.97 li
161.811 36 li
161.451 35.91 li
160.821 35.77 li
cp
162.531 37.21 mo
162.691 37.25 li
163.491 37.47 li
163.751 36.5 li
162.931 36.28 li
162.781 36.24 li
cp
164.441 37.73 mo
165.401 38.02 li
165.681 37.06 li
164.731 36.77 li
cp
166.341 38.32 mo
166.761 38.46 li
167.281 38.64 li
167.611 37.69 li
167.071 37.5 li
166.651 37.37 li
cp
168.211 38.97 mo
169.141 39.32 li
169.501 38.39 li
168.561 38.03 li
cp
170.051 39.7 mo
170.341 39.81 li
170.951 40.09 li
171.371 39.18 li
170.721 38.89 li
170.431 38.77 li
cp
171.841 40.52 mo
172.411 40.8 li
172.711 40.96 li
173.191 40.08 li
172.851 39.9 li
172.281 39.62 li
cp
173.561 41.44 mo
174.181 41.82 li
174.391 41.96 li
174.951 41.13 li
174.711 40.97 li
174.081 40.59 li
cp
175.191 42.51 mo
175.651 42.87 li
175.931 43.12 li
176.601 42.37 li
176.261 42.08 li
175.791 41.72 li
cp
176.621 43.79 mo
176.761 43.94 li
177.181 44.46 li
177.191 44.48 li
178.041 43.95 li
177.961 43.84 li
177.481 43.24 li
177.341 43.1 li
cp
177.641 45.3 mo
177.731 45.51 li
177.711 45.43 li
177.861 46.01 li
177.851 45.92 li
177.861 46.1 li
178.861 46.01 li
178.841 45.83 li
178.841 45.8 178.841 45.77 178.831 45.75 cv
178.671 45.17 li
178.661 45.14 178.651 45.12 178.641 45.09 cv
178.551 44.89 li
cp
177.881 46.98 mo
177.801 47.54 li
177.711 47.92 li
178.691 48.14 li
178.791 47.68 li
178.871 47.12 li
cp
177.441 48.81 mo
177.311 49.14 li
177.061 49.66 li
177.921 50.15 li
177.951 50.09 li
178.241 49.5 li
178.371 49.16 li
cp
176.551 50.5 mo
176.421 50.72 li
176.001 51.26 li
176.801 51.87 li
177.281 51.23 li
177.411 51.01 li
cp
175.401 51.99 mo
174.711 52.72 li
175.401 53.44 li
175.441 53.41 li
176.121 52.68 li
cp
173.991 53.35 mo
173.651 53.65 li
173.241 53.95 li
173.841 54.75 li
174.311 54.4 li
174.651 54.1 li
cp
172.471 54.52 mo
171.631 55.06 li
172.161 55.9 li
173.011 55.37 li
cp
170.801 55.54 mo
169.911 56.01 li
170.381 56.89 li
171.271 56.42 li
cp
169.041 56.4 mo
168.361 56.7 li
168.141 56.78 li
168.481 57.72 li
168.761 57.62 li
169.441 57.32 li
cp
167.201 57.12 mo
166.831 57.25 li
166.291 57.4 li
166.561 58.37 li
167.181 58.19 li
167.541 58.06 li
cp
165.321 57.67 mo
165.261 57.69 li
164.381 57.87 li
164.581 58.85 li
165.531 58.65 li
165.591 58.64 li
cp
163.431 58.04 mo
162.441 58.16 li
162.561 59.15 li
163.551 59.03 li
cp
161.481 58.23 mo
161.361 58.23 li
161.411 59.23 li
161.531 59.23 li
cp
166.951 54.55 mo
160.401 58.78 li
167.301 62.41 li
167.551 62.53 167.851 62.44 167.981 62.2 cv
168.111 61.95 168.011 61.65 167.771 61.52 cv
161.621 58.29 li
161.661 59.15 li
167.501 55.39 li
167.731 55.24 167.801 54.93 167.651 54.7 cv
167.501 54.47 167.191 54.4 166.951 54.55 cv
cp
.740688 .455604 .0273442 0 cmyk
f
84.2709 57.21 mo
96.2709 57.21 li
96.2709 49.4973 li
84.2709 49.4973 li
cp
0 .490333 .803677 0 cmyk
ef
84.2709 57.21 mo
96.2709 57.21 li
96.2709 49.4973 li
84.2709 49.4973 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
253.331 48.14 mo
265.331 48.14 li
265.331 40.4273 li
253.331 40.4273 li
cp
0 .490333 .803677 0 cmyk
ef
253.331 48.14 mo
265.331 48.14 li
265.331 40.4273 li
253.331 40.4273 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
269.831 42.51 mo
281.831 42.51 li
281.831 34.7973 li
269.831 34.7973 li
cp
0 .490333 .803677 0 cmyk
ef
269.831 42.51 mo
281.831 42.51 li
281.831 34.7973 li
269.831 34.7973 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
285.581 36.11 mo
297.581 36.11 li
297.581 28.3973 li
285.581 28.3973 li
cp
0 .490333 .803677 0 cmyk
ef
285.581 36.11 mo
297.581 36.11 li
297.581 28.3973 li
285.581 28.3973 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
253.331 73.4 mo
265.331 73.4 li
265.331 65.6873 li
253.331 65.6873 li
cp
0 .490333 .803677 0 cmyk
ef
253.331 73.4 mo
265.331 73.4 li
265.331 65.6873 li
253.331 65.6873 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
269.331 78 mo
281.331 78 li
281.331 70.2873 li
269.331 70.2873 li
cp
0 .490333 .803677 0 cmyk
ef
269.331 78 mo
281.331 78 li
281.331 70.2873 li
269.331 70.2873 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
301.831 90.06 mo
313.831 90.06 li
313.831 82.3473 li
301.831 82.3473 li
cp
0 .490333 .803677 0 cmyk
ef
301.831 90.06 mo
313.831 90.06 li
313.831 82.3473 li
301.831 82.3473 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
285.831 84.86 mo
297.831 84.86 li
297.831 77.1473 li
285.831 77.1473 li
cp
0 .490333 .803677 0 cmyk
ef
285.831 84.86 mo
297.831 84.86 li
297.831 77.1473 li
285.831 77.1473 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
329.111 25.51 mo
328.111 25.47 li
328.071 26.47 li
329.071 26.51 li
cp
327.151 25.4 mo
326.161 25.28 li
326.041 26.27 li
327.031 26.39 li
cp
325.221 25.11 mo
324.241 24.9 li
324.031 25.88 li
325.011 26.09 li
cp
323.311 24.64 mo
322.621 24.43 li
322.391 24.35 li
322.051 25.29 li
322.341 25.4 li
323.041 25.6 li
cp
321.451 24.01 mo
321.101 23.88 li
320.571 23.63 li
320.151 24.54 li
320.761 24.81 li
321.111 24.94 li
cp
319.661 23.22 mo
319.641 23.21 li
318.811 22.76 li
318.331 23.63 li
319.231 24.12 li
319.241 24.13 li
cp
317.981 22.27 mo
317.141 21.73 li
316.601 22.56 li
317.441 23.11 li
cp
316.381 21.15 mo
315.811 20.72 li
315.631 20.55 li
314.961 21.29 li
315.201 21.51 li
315.771 21.94 li
cp
314.891 19.88 mo
314.751 19.75 li
314.231 19.18 li
313.501 19.86 li
314.071 20.48 li
314.221 20.62 li
cp
313.621 18.46 mo
313.031 17.67 li
312.191 18.21 li
312.231 18.27 li
312.821 19.06 li
cp
312.561 16.84 mo
312.411 16.59 li
312.161 16.05 li
312.151 16.02 li
311.221 16.37 li
311.261 16.47 li
311.551 17.09 li
311.691 17.34 li
cp
311.851 15.11 mo
311.801 14.95 li
311.681 14.39 li
311.661 14.2 li
310.671 14.34 li
310.701 14.6 li
310.841 15.23 li
310.891 15.39 li
cp
311.591 13.32 mo
311.641 12.76 li
311.621 12.85 li
311.741 12.42 li
310.771 12.16 li
310.661 12.59 li
310.651 12.62 310.641 12.65 310.641 12.68 cv
310.591 13.23 li
cp
312.081 11.63 mo
312.341 11.2 li
312.611 10.86 li
311.821 10.25 li
311.481 10.69 li
311.221 11.12 li
cp
313.241 10.15 mo
313.271 10.12 li
313.871 9.57999 li
313.931 9.53 li
313.311 8.75 li
313.201 8.84 li
312.541 9.44 li
312.511 9.45999 li
cp
314.701 8.94 mo
315.331 8.5 li
315.511 8.39001 li
314.981 7.54001 li
314.751 7.67999 li
314.131 8.12 li
cp
316.341 7.88 mo
317.101 7.45999 li
317.201 7.41 li
316.741 6.51999 li
316.611 6.57999 li
315.851 7.01001 li
cp
318.091 6.95001 mo
318.091 6.95001 li
318.981 6.54001 li
318.561 5.63 li
317.641 6.06 li
317.631 6.06 li
cp
319.881 6.14999 mo
320.301 5.97 li
320.791 5.78 li
320.431 4.85001 li
319.911 5.04999 li
319.491 5.23001 li
cp
321.721 5.42001 mo
322.661 5.07999 li
322.311 4.14001 li
321.371 4.48001 li
cp
323.591 4.76999 mo
324.051 4.62 li
324.531 4.47 li
324.241 3.51999 li
323.731 3.67001 li
323.281 3.82001 li
cp
325.481 4.19 mo
326.441 3.91 li
326.171 2.95001 li
325.211 3.22 li
cp
327.401 3.66 mo
328.261 3.44 li
328.351 3.42001 li
328.131 2.44 li
328.011 2.47 li
327.151 2.69 li
cp
329.331 3.20001 mo
330.301 2.98999 li
330.091 2.01001 li
329.111 2.23001 li
cp
331.281 2.76999 mo
331.281 2.76999 li
332.241 2.59 li
332.071 1.60999 li
331.061 1.79001 li
cp
333.231 2.41 mo
334.211 2.23001 li
334.031 1.25 li
333.051 1.42999 li
cp
335.181 2.09 mo
336.171 1.95001 li
336.031 .959991 li
335.041 1.10001 li
cp
337.161 1.81 mo
337.691 1.73001 li
338.131 1.69 li
338.031 .690002 li
337.551 .73999 li
337.021 .820007 li
cp
339.131 1.59 mo
340.121 1.48999 li
340.021 .48999 li
339.031 .589996 li
cp
341.101 1.39001 mo
342.101 1.32999 li
342.041 .329987 li
341.041 .399994 li
cp
343.101 1.26999 mo
344.091 1.20001 li
344.031 .200012 li
343.031 .269989 li
cp
345.071 1.17001 mo
346.071 1.14999 li
346.051 .149994 li
345.051 .170013 li
cp
347.071 1.13 mo
347.851 1.10999 li
348.051 1.12 li
348.071 .119995 li
347.831 .119995 li
347.051 .130005 li
cp
349.051 1.14001 mo
350.051 1.16 li
350.071 .160004 li
349.071 .140015 li
cp
351.051 1.17999 mo
351.271 1.17999 li
352.031 1.23001 li
352.091 .230011 li
351.291 .179993 li
351.071 .179993 li
cp
353.031 1.29001 mo
354.031 1.35001 li
354.091 .350006 li
353.091 .290009 li
cp
355.001 1.42999 mo
356.001 1.51999 li
356.101 .529999 li
355.101 .429993 li
cp
356.991 1.62 mo
357.991 1.72 li
358.091 .720001 li
357.091 .630005 li
cp
358.961 1.85001 mo
359.951 1.98999 li
360.091 1 li
359.101 .859985 li
cp
360.941 2.12 mo
361.261 2.17001 li
361.911 2.28 li
362.081 1.29999 li
361.401 1.17999 li
361.081 1.13 li
cp
362.891 2.45999 mo
363.881 2.63 li
364.051 1.64999 li
363.071 1.47 li
cp
364.841 2.82001 mo
365.821 3.03 li
366.031 2.04999 li
365.051 1.84 li
cp
366.801 3.23999 mo
367.431 3.38 li
367.761 3.45999 li
368.001 2.48999 li
367.641 2.39999 li
367.011 2.26001 li
cp
368.731 3.70001 mo
368.881 3.73999 li
369.681 3.95999 li
369.951 2.98999 li
369.121 2.76999 li
368.971 2.73001 li
cp
370.641 4.22 mo
371.591 4.51001 li
371.881 3.54999 li
370.921 3.26999 li
cp
372.541 4.81 mo
372.951 4.94 li
373.471 5.12 li
373.801 4.17999 li
373.261 3.98999 li
372.841 3.85001 li
cp
374.401 5.45001 mo
375.341 5.81 li
375.691 4.87 li
374.761 4.51999 li
cp
376.241 6.19 mo
376.531 6.29999 li
377.151 6.57999 li
377.561 5.67001 li
376.911 5.38 li
376.631 5.26001 li
cp
378.031 7 mo
378.601 7.28 li
378.911 7.45001 li
379.391 6.57001 li
379.041 6.38 li
378.481 6.10999 li
cp
379.761 7.92999 mo
380.381 8.29999 li
380.581 8.44 li
381.151 7.62 li
380.891 7.45001 li
380.271 7.07001 li
cp
381.381 9 mo
381.841 9.35001 li
382.131 9.60999 li
382.791 8.85999 li
382.441 8.56 li
381.981 8.20999 li
cp
382.821 10.28 mo
382.951 10.42 li
383.371 10.95 li
383.381 10.97 li
384.231 10.45 li
384.151 10.32 li
383.671 9.73001 li
383.541 9.57999 li
cp
383.831 11.79 mo
383.921 11.99 li
383.901 11.91 li
384.051 12.49 li
384.041 12.41 li
384.051 12.58 li
385.051 12.49 li
385.031 12.31 li
385.031 12.29 385.021 12.26 385.021 12.23 cv
384.861 11.65 li
384.851 11.62 384.841 11.6 384.831 11.57 cv
384.741 11.37 li
cp
384.071 13.47 mo
383.991 14.02 li
383.901 14.41 li
384.871 14.63 li
384.981 14.16 li
385.061 13.61 li
cp
383.621 15.3 mo
383.501 15.62 li
383.251 16.14 li
384.111 16.64 li
384.141 16.58 li
384.431 15.98 li
384.561 15.65 li
cp
382.741 16.99 mo
382.611 17.21 li
382.191 17.75 li
382.981 18.36 li
383.471 17.71 li
383.601 17.5 li
cp
381.581 18.48 mo
380.901 19.2 li
381.591 19.93 li
381.631 19.89 li
382.311 19.17 li
cp
380.181 19.83 mo
379.841 20.13 li
379.431 20.43 li
380.031 21.24 li
380.501 20.88 li
380.841 20.59 li
cp
378.661 21.01 mo
377.811 21.54 li
378.351 22.39 li
379.191 21.85 li
cp
376.981 22.03 mo
376.101 22.5 li
376.571 23.38 li
377.451 22.91 li
cp
375.221 22.89 mo
374.551 23.18 li
374.331 23.26 li
374.671 24.2 li
374.951 24.1 li
375.621 23.8 li
cp
373.391 23.6 mo
373.021 23.73 li
372.471 23.89 li
372.741 24.85 li
373.371 24.67 li
373.731 24.54 li
cp
371.511 24.16 mo
371.451 24.17 li
370.561 24.35 li
370.761 25.33 li
371.721 25.13 li
371.781 25.12 li
cp
369.621 24.52 mo
368.621 24.64 li
368.741 25.63 li
369.741 25.51 li
cp
367.671 24.71 mo
367.551 24.72 li
367.601 25.72 li
367.711 25.71 li
cp
373.141 21.03 mo
366.591 25.26 li
373.491 28.89 li
373.741 29.02 374.041 28.92 374.171 28.68 cv
374.301 28.43 374.201 28.13 373.961 28 cv
367.811 24.77 li
367.851 25.64 li
373.691 21.87 li
373.921 21.72 373.991 21.41 373.841 21.18 cv
373.691 20.95 373.381 20.88 373.141 21.03 cv
cp
.740688 .455604 .0273442 0 cmyk
f
329.111 84.46 mo
328.111 84.42 li
328.071 85.42 li
329.071 85.46 li
cp
327.151 84.35 mo
326.161 84.23 li
326.041 85.22 li
327.031 85.34 li
cp
325.221 84.06 mo
324.241 83.85 li
324.031 84.83 li
325.011 85.04 li
cp
323.311 83.59 mo
322.621 83.39 li
322.391 83.31 li
322.051 84.24 li
322.341 84.35 li
323.041 84.55 li
cp
321.461 82.96 mo
321.101 82.83 li
320.571 82.58 li
320.161 83.49 li
320.751 83.76 li
321.111 83.9 li
cp
319.661 82.17 mo
319.641 82.16 li
318.811 81.71 li
318.331 82.59 li
319.231 83.08 li
319.241 83.08 li
cp
317.981 81.22 mo
317.151 80.68 li
316.601 81.52 li
317.441 82.06 li
cp
316.381 80.1 mo
315.811 79.67 li
315.631 79.5 li
314.961 80.24 li
315.201 80.46 li
315.771 80.89 li
cp
314.891 78.83 mo
314.751 78.7 li
314.231 78.14 li
313.501 78.81 li
314.071 79.44 li
314.221 79.57 li
cp
313.621 77.41 mo
313.031 76.63 li
312.191 77.16 li
312.231 77.23 li
312.821 78.01 li
cp
312.561 75.79 mo
312.411 75.55 li
312.161 75.01 li
312.151 74.97 li
311.221 75.32 li
311.261 75.43 li
311.551 76.04 li
311.691 76.29 li
cp
311.851 74.06 mo
311.801 73.9 li
311.681 73.35 li
311.661 73.15 li
310.671 73.29 li
310.701 73.56 li
310.841 74.18 li
310.891 74.34 li
cp
311.591 72.27 mo
311.641 71.71 li
311.621 71.8 li
311.741 71.37 li
310.771 71.12 li
310.661 71.54 li
310.651 71.57 310.641 71.6 310.641 71.63 cv
310.591 72.18 li
cp
312.081 70.59 mo
312.341 70.15 li
312.611 69.81 li
311.821 69.2 li
311.481 69.64 li
311.221 70.07 li
cp
313.241 69.1 mo
313.271 69.07 li
313.871 68.53 li
313.931 68.48 li
313.311 67.7 li
313.201 67.79 li
312.541 68.39 li
312.511 68.42 li
cp
314.701 67.89 mo
315.331 67.45 li
315.501 67.34 li
314.981 66.49 li
314.751 66.63 li
314.131 67.07 li
cp
316.341 66.83 mo
317.101 66.41 li
317.201 66.36 li
316.741 65.47 li
316.611 65.53 li
315.851 65.96 li
cp
318.091 65.9 mo
318.091 65.9 li
318.981 65.49 li
318.561 64.58 li
317.641 65.01 li
317.631 65.01 li
cp
319.881 65.1 mo
320.301 64.92 li
320.791 64.73 li
320.431 63.8 li
319.911 64 li
319.491 64.18 li
cp
321.711 64.38 mo
322.651 64.03 li
322.311 63.09 li
321.371 63.44 li
cp
323.591 63.72 mo
324.051 63.57 li
324.531 63.42 li
324.241 62.47 li
323.731 62.62 li
323.281 62.77 li
cp
325.481 63.14 mo
326.441 62.87 li
326.171 61.9 li
325.211 62.17 li
cp
327.391 62.61 mo
328.261 62.39 li
328.351 62.37 li
328.131 61.39 li
328.011 61.42 li
327.151 61.64 li
cp
329.321 62.15 mo
330.301 61.94 li
330.081 60.96 li
329.111 61.18 li
cp
331.281 61.72 mo
331.281 61.72 li
332.241 61.54 li
332.061 60.56 li
331.061 60.74 li
cp
333.231 61.36 mo
334.211 61.19 li
334.031 60.2 li
333.051 60.38 li
cp
335.181 61.04 mo
336.171 60.9 li
336.031 59.91 li
335.041 60.05 li
cp
337.161 60.76 mo
337.691 60.68 li
338.131 60.64 li
338.031 59.64 li
337.551 59.69 li
337.021 59.77 li
cp
339.131 60.54 mo
340.121 60.44 li
340.021 59.44 li
339.031 59.54 li
cp
341.101 60.34 mo
342.101 60.28 li
342.031 59.28 li
341.031 59.35 li
cp
343.091 60.22 mo
344.091 60.15 li
344.031 59.15 li
343.031 59.22 li
cp
345.071 60.12 mo
346.071 60.1 li
346.051 59.1 li
345.051 59.12 li
cp
347.071 60.08 mo
347.851 60.06 li
348.051 60.07 li
348.071 59.07 li
347.831 59.07 li
347.051 59.08 li
cp
349.051 60.09 mo
350.051 60.11 li
350.071 59.11 li
349.071 59.09 li
cp
351.051 60.13 mo
351.271 60.13 li
352.031 60.18 li
352.091 59.18 li
351.291 59.13 li
351.071 59.13 li
cp
353.021 60.24 mo
354.021 60.3 li
354.081 59.3 li
353.091 59.24 li
cp
355.001 60.38 mo
356.001 60.47 li
356.091 59.48 li
355.101 59.38 li
cp
356.991 60.57 mo
357.991 60.67 li
358.081 59.67 li
357.091 59.58 li
cp
358.961 60.8 mo
359.951 60.94 li
360.091 59.95 li
359.091 59.81 li
cp
360.941 61.07 mo
361.261 61.12 li
361.911 61.23 li
362.081 60.25 li
361.401 60.13 li
361.081 60.08 li
cp
362.891 61.41 mo
363.881 61.58 li
364.051 60.6 li
363.071 60.42 li
cp
364.841 61.77 mo
365.821 61.98 li
366.031 61 li
365.051 60.79 li
cp
366.801 62.19 mo
367.431 62.33 li
367.751 62.41 li
368.001 61.44 li
367.641 61.35 li
367.011 61.21 li
cp
368.721 62.65 mo
368.881 62.69 li
369.681 62.91 li
369.941 61.94 li
369.121 61.72 li
368.971 61.68 li
cp
370.631 63.17 mo
371.591 63.46 li
371.881 62.5 li
370.921 62.21 li
cp
372.541 63.76 mo
372.951 63.89 li
373.471 64.07 li
373.801 63.13 li
373.261 62.94 li
372.841 62.8 li
cp
374.401 64.4 mo
375.331 64.76 li
375.691 63.82 li
374.751 63.47 li
cp
376.241 65.13 mo
376.531 65.25 li
377.151 65.53 li
377.551 64.62 li
376.911 64.33 li
376.631 64.21 li
cp
378.031 65.95 mo
378.601 66.23 li
378.901 66.4 li
379.381 65.52 li
379.041 65.33 li
378.481 65.05 li
cp
379.761 66.88 mo
380.381 67.25 li
380.581 67.39 li
381.141 66.57 li
380.891 66.4 li
380.271 66.02 li
cp
381.381 67.95 mo
381.841 68.3 li
382.131 68.56 li
382.791 67.81 li
382.441 67.51 li
381.981 67.16 li
cp
382.811 69.23 mo
382.951 69.37 li
383.371 69.9 li
383.381 69.91 li
384.231 69.39 li
384.151 69.27 li
383.671 68.68 li
383.541 68.53 li
cp
383.831 70.74 mo
383.921 70.94 li
383.901 70.86 li
384.051 71.44 li
384.041 71.36 li
384.051 71.53 li
385.051 71.44 li
385.031 71.26 li
385.031 71.24 385.021 71.21 385.021 71.18 cv
384.861 70.6 li
384.851 70.57 384.841 70.55 384.831 70.52 cv
384.741 70.32 li
cp
384.071 72.41 mo
383.991 72.97 li
383.901 73.36 li
384.881 73.58 li
384.981 73.11 li
385.061 72.56 li
cp
383.631 74.24 mo
383.501 74.57 li
383.241 75.1 li
384.111 75.59 li
384.151 75.53 li
384.431 74.93 li
384.561 74.6 li
cp
382.741 75.94 mo
382.611 76.15 li
382.191 76.7 li
382.981 77.31 li
383.471 76.67 li
383.601 76.45 li
cp
381.581 77.43 mo
380.901 78.15 li
381.591 78.87 li
381.631 78.84 li
382.311 78.11 li
cp
380.181 78.79 mo
379.841 79.09 li
379.441 79.39 li
380.031 80.19 li
380.501 79.84 li
380.841 79.53 li
cp
378.661 79.96 mo
377.821 80.49 li
378.351 81.34 li
379.201 80.81 li
cp
376.981 80.97 mo
376.101 81.44 li
376.571 82.33 li
377.451 81.86 li
cp
375.221 81.84 mo
374.551 82.13 li
374.331 82.21 li
374.671 83.15 li
374.951 83.05 li
375.621 82.75 li
cp
373.391 82.55 mo
373.021 82.68 li
372.471 82.84 li
372.741 83.8 li
373.371 83.62 li
373.731 83.49 li
cp
371.511 83.11 mo
371.451 83.12 li
370.571 83.3 li
370.761 84.28 li
371.721 84.08 li
371.781 84.07 li
cp
369.621 83.47 mo
368.631 83.59 li
368.751 84.59 li
369.741 84.46 li
cp
367.671 83.67 mo
367.561 83.67 li
367.601 84.67 li
367.711 84.67 li
cp
373.161 80.01 mo
366.591 84.21 li
373.481 87.87 li
373.721 88 374.021 87.91 374.151 87.66 cv
374.281 87.42 374.191 87.12 373.951 86.99 cv
367.811 83.73 li
367.851 84.59 li
373.701 80.85 li
373.931 80.71 374.001 80.4 373.851 80.16 cv
373.701 79.93 373.401 79.86 373.161 80.01 cv
cp
f
72.4429 139.54 mo
84.4429 139.54 li
84.4429 131.827 li
72.4429 131.827 li
cp
0 .490333 .803677 0 cmyk
ef
72.4429 139.54 mo
84.4429 139.54 li
84.4429 131.827 li
72.4429 131.827 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
88.9409 133.91 mo
100.941 133.91 li
100.941 126.197 li
88.9409 126.197 li
cp
0 .490333 .803677 0 cmyk
ef
88.9409 133.91 mo
100.941 133.91 li
100.941 126.197 li
88.9409 126.197 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
104.691 127.51 mo
116.691 127.51 li
116.691 119.797 li
104.691 119.797 li
cp
0 .490333 .803677 0 cmyk
ef
104.691 127.51 mo
116.691 127.51 li
116.691 119.797 li
104.691 119.797 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
566.141 69.45 mo
603.641 69.45 li
603.641 45.653 li
566.141 45.653 li
cp
.721096 .438056 .0239261 0 cmyk
ef
566.141 69.45 mo
603.641 69.45 li
603.641 45.653 li
566.141 45.653 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
576.011 63.58 mo
(T3)
[8.76001 0 ]xsh
593.891 63.58 mo
( )sh
554.141 56.84 mo
566.141 56.84 li
566.141 49.1273 li
554.141 49.1273 li
cp
0 .490333 .803677 0 cmyk
ef
554.141 56.84 mo
566.141 56.84 li
566.141 49.1273 li
554.141 49.1273 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
471.521 40.3 mo
483.521 40.3 li
483.521 32.5873 li
471.521 32.5873 li
cp
0 .490333 .803677 0 cmyk
ef
471.521 40.3 mo
483.521 40.3 li
483.521 32.5873 li
471.521 32.5873 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
487.521 44.9 mo
499.521 44.9 li
499.521 37.1873 li
487.521 37.1873 li
cp
0 .490333 .803677 0 cmyk
ef
487.521 44.9 mo
499.521 44.9 li
499.521 37.1873 li
487.521 37.1873 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
520.021 56.96 mo
532.021 56.96 li
532.021 49.2473 li
520.021 49.2473 li
cp
0 .490333 .803677 0 cmyk
ef
520.021 56.96 mo
532.021 56.96 li
532.021 49.2473 li
520.021 49.2473 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
504.021 51.76 mo
516.021 51.76 li
516.021 44.0473 li
504.021 44.0473 li
cp
0 .490333 .803677 0 cmyk
ef
504.021 51.76 mo
516.021 51.76 li
516.021 44.0473 li
504.021 44.0473 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
478.771 97.13 mo
490.771 97.13 li
490.771 89.4173 li
478.771 89.4173 li
cp
.438849 .103182 .835325 0 cmyk
ef
478.771 97.13 mo
490.771 97.13 li
490.771 89.4173 li
478.771 89.4173 li
cp
.589868 .296208 .953368 .106538 cmyk
@
495.271 91.5 mo
507.271 91.5 li
507.271 83.7873 li
495.271 83.7873 li
cp
.438849 .103182 .835325 0 cmyk
ef
495.271 91.5 mo
507.271 91.5 li
507.271 83.7873 li
495.271 83.7873 li
cp
.589868 .296208 .953368 .106538 cmyk
@
527.271 79.47 mo
539.271 79.47 li
539.271 71.7573 li
527.271 71.7573 li
cp
.438849 .103182 .835325 0 cmyk
ef
527.271 79.47 mo
539.271 79.47 li
539.271 71.7573 li
527.271 71.7573 li
cp
.589868 .296208 .953368 .106538 cmyk
@
511.021 85.1 mo
523.021 85.1 li
523.021 77.3873 li
511.021 77.3873 li
cp
.438849 .103182 .835325 0 cmyk
ef
511.021 85.1 mo
523.021 85.1 li
523.021 77.3873 li
511.021 77.3873 li
cp
.589868 .296208 .953368 .106538 cmyk
@
554.271 65.36 mo
566.271 65.36 li
566.271 57.6473 li
554.271 57.6473 li
cp
.438849 .103182 .835325 0 cmyk
ef
554.271 65.36 mo
566.271 65.36 li
566.271 57.6473 li
554.271 57.6473 li
cp
.589868 .296208 .953368 .106538 cmyk
@
260.461 196.14 mo
272.461 196.14 li
272.461 188.427 li
260.461 188.427 li
cp
.438849 .103182 .835325 0 cmyk
ef
260.461 196.14 mo
272.461 196.14 li
272.461 188.427 li
260.461 188.427 li
cp
.589868 .296208 .953368 .106538 cmyk
@
276.961 190.51 mo
288.961 190.51 li
288.961 182.797 li
276.961 182.797 li
cp
.438849 .103182 .835325 0 cmyk
ef
276.961 190.51 mo
288.961 190.51 li
288.961 182.797 li
276.961 182.797 li
cp
.589868 .296208 .953368 .106538 cmyk
@
308.961 178.48 mo
320.961 178.48 li
320.961 170.767 li
308.961 170.767 li
cp
.438849 .103182 .835325 0 cmyk
ef
308.961 178.48 mo
320.961 178.48 li
320.961 170.767 li
308.961 170.767 li
cp
.589868 .296208 .953368 .106538 cmyk
@
292.711 184.11 mo
304.711 184.11 li
304.711 176.397 li
292.711 176.397 li
cp
.438849 .103182 .835325 0 cmyk
ef
292.711 184.11 mo
304.711 184.11 li
304.711 176.397 li
292.711 176.397 li
cp
.589868 .296208 .953368 .106538 cmyk
@
260.081 125.75 mo
272.081 125.75 li
272.081 118.037 li
260.081 118.037 li
cp
0 .490333 .803677 0 cmyk
ef
260.081 125.75 mo
272.081 125.75 li
272.081 118.037 li
260.081 118.037 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
276.081 130.34 mo
288.081 130.34 li
288.081 122.627 li
276.081 122.627 li
cp
0 .490333 .803677 0 cmyk
ef
276.081 130.34 mo
288.081 130.34 li
288.081 122.627 li
276.081 122.627 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
308.581 142.4 mo
320.581 142.4 li
320.581 134.687 li
308.581 134.687 li
cp
0 .490333 .803677 0 cmyk
ef
308.581 142.4 mo
320.581 142.4 li
320.581 134.687 li
308.581 134.687 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
292.581 137.2 mo
304.581 137.2 li
304.581 129.487 li
292.581 129.487 li
cp
0 .490333 .803677 0 cmyk
ef
292.581 137.2 mo
304.581 137.2 li
304.581 129.487 li
292.581 129.487 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
352.211 161.13 mo
364.211 161.13 li
364.211 153.417 li
352.211 153.417 li
cp
.438849 .103182 .835325 0 cmyk
ef
352.211 161.13 mo
364.211 161.13 li
364.211 153.417 li
352.211 153.417 li
cp
.589868 .296208 .953368 .106538 cmyk
@
339.831 161.16 mo
351.831 161.16 li
351.831 153.447 li
339.831 153.447 li
cp
0 .490333 .803677 0 cmyk
ef
339.831 161.16 mo
351.831 161.16 li
351.831 153.447 li
339.831 153.447 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
327.331 161.28 mo
339.331 161.28 li
339.331 153.567 li
327.331 153.567 li
cp
.438849 .103182 .835325 0 cmyk
ef
327.331 161.28 mo
339.331 161.28 li
339.331 153.567 li
327.331 153.567 li
cp
.589868 .296208 .953368 .106538 cmyk
@
566.171 57.8 mo
565.171 57.75 li
565.131 58.75 li
566.131 58.8 li
cp
564.211 57.69 mo
563.221 57.56 li
563.101 58.56 li
564.091 58.68 li
cp
562.281 57.39 mo
561.301 57.19 li
561.091 58.17 li
562.071 58.37 li
cp
560.371 56.93 mo
559.681 56.73 li
559.451 56.64 li
559.111 57.58 li
559.401 57.69 li
560.101 57.89 li
cp
558.521 56.3 mo
558.161 56.16 li
557.631 55.92 li
557.221 56.83 li
557.811 57.1 li
558.171 57.23 li
cp
556.721 55.51 mo
556.701 55.5 li
555.871 55.05 li
555.391 55.92 li
556.291 56.41 li
556.301 56.42 li
cp
555.041 54.56 mo
554.211 54.02 li
553.661 54.85 li
554.501 55.4 li
cp
553.441 53.44 mo
552.871 53 li
552.691 52.84 li
552.021 53.58 li
552.261 53.8 li
552.831 54.23 li
cp
551.951 52.17 mo
551.811 52.04 li
551.291 51.48 li
550.561 52.15 li
551.131 52.78 li
551.281 52.91 li
cp
550.681 50.75 mo
550.091 49.97 li
549.251 50.5 li
549.291 50.56 li
549.881 51.35 li
cp
549.621 49.13 mo
549.471 48.88 li
549.221 48.34 li
549.211 48.31 li
548.281 48.66 li
548.321 48.77 li
548.611 49.38 li
548.751 49.63 li
cp
548.911 47.4 mo
548.861 47.24 li
548.741 46.69 li
548.721 46.49 li
547.731 46.63 li
547.761 46.9 li
547.901 47.52 li
547.951 47.68 li
cp
548.651 45.61 mo
548.701 45.05 li
548.681 45.14 li
548.801 44.71 li
547.831 44.45 li
547.721 44.88 li
547.711 44.91 547.701 44.93 547.701 44.96 cv
547.651 45.52 li
cp
549.141 43.92 mo
549.401 43.49 li
549.671 43.15 li
548.881 42.54 li
548.541 42.97 li
548.281 43.41 li
cp
550.311 42.44 mo
550.331 42.42 li
550.931 41.88 li
551.001 41.82 li
550.381 41.04 li
550.261 41.13 li
549.601 41.73 li
549.581 41.76 li
cp
551.761 41.23 mo
552.391 40.8 li
552.571 40.68 li
552.041 39.84 li
551.811 39.98 li
551.191 40.41 li
cp
553.401 40.17 mo
554.161 39.75 li
554.261 39.7 li
553.811 38.81 li
553.671 38.88 li
552.911 39.3 li
cp
555.151 39.24 mo
555.161 39.24 li
556.041 38.83 li
555.621 37.92 li
554.701 38.35 li
cp
556.941 38.44 mo
557.361 38.26 li
557.851 38.07 li
557.491 37.13 li
556.971 37.34 li
556.551 37.52 li
cp
558.781 37.71 mo
559.721 37.37 li
559.381 36.43 li
558.441 36.77 li
cp
560.651 37.06 mo
561.111 36.91 li
561.591 36.76 li
561.301 35.8 li
560.791 35.96 li
560.341 36.11 li
cp
562.541 36.47 mo
563.501 36.2 li
563.231 35.24 li
562.271 35.51 li
cp
564.461 35.95 mo
565.321 35.73 li
565.411 35.71 li
565.201 34.74 li
565.071 34.77 li
564.211 34.98 li
cp
566.391 35.49 mo
567.371 35.27 li
567.151 34.3 li
566.171 34.52 li
cp
568.341 35.06 mo
568.341 35.06 li
569.301 34.88 li
569.131 33.9 li
568.121 34.08 li
cp
570.291 34.71 mo
571.271 34.53 li
571.101 33.55 li
570.111 33.72 li
cp
572.241 34.38 mo
573.231 34.24 li
573.091 33.25 li
572.101 33.39 li
cp
574.221 34.1 mo
574.751 34.03 li
575.201 33.98 li
575.091 32.99 li
574.611 33.04 li
574.081 33.11 li
cp
576.191 33.88 mo
577.191 33.78 li
577.081 32.78 li
576.091 32.89 li
cp
578.161 33.68 mo
579.161 33.62 li
579.101 32.62 li
578.101 32.68 li
cp
580.161 33.56 mo
581.161 33.5 li
581.091 32.5 li
580.101 32.56 li
cp
582.131 33.46 mo
583.131 33.44 li
583.111 32.44 li
582.111 32.46 li
cp
584.131 33.42 mo
584.911 33.4 li
585.111 33.41 li
585.131 32.41 li
584.891 32.4 li
584.111 32.42 li
cp
586.111 33.43 mo
587.111 33.45 li
587.131 32.45 li
586.131 32.43 li
cp
588.111 33.47 mo
588.331 33.47 li
589.091 33.52 li
589.151 32.52 li
588.351 32.47 li
588.131 32.47 li
cp
590.091 33.58 mo
591.091 33.64 li
591.151 32.64 li
590.151 32.58 li
cp
592.071 33.71 mo
593.061 33.81 li
593.161 32.82 li
592.161 32.72 li
cp
594.061 33.91 mo
595.051 34.01 li
595.151 33.01 li
594.151 32.91 li
cp
596.021 34.14 mo
597.011 34.28 li
597.151 33.28 li
596.161 33.15 li
cp
598.001 34.41 mo
598.321 34.46 li
598.971 34.57 li
599.151 33.59 li
598.461 33.46 li
598.141 33.42 li
cp
599.961 34.75 mo
600.941 34.92 li
601.121 33.94 li
600.131 33.76 li
cp
601.901 35.11 mo
602.881 35.32 li
603.091 34.34 li
602.111 34.13 li
cp
603.861 35.53 mo
604.491 35.66 li
604.821 35.75 li
605.061 34.78 li
604.701 34.69 li
604.071 34.55 li
cp
605.791 35.99 mo
605.941 36.03 li
606.741 36.25 li
607.011 35.28 li
606.181 35.06 li
606.031 35.02 li
cp
607.701 36.51 mo
608.661 36.8 li
608.941 35.84 li
607.981 35.55 li
cp
609.601 37.1 mo
610.011 37.23 li
610.531 37.42 li
610.861 36.47 li
610.321 36.28 li
609.901 36.15 li
cp
611.461 37.75 mo
612.401 38.1 li
612.751 37.17 li
611.811 36.81 li
cp
613.311 38.48 mo
613.591 38.59 li
614.211 38.87 li
614.621 37.96 li
613.971 37.67 li
613.691 37.55 li
cp
615.101 39.29 mo
615.661 39.57 li
615.971 39.74 li
616.451 38.86 li
616.101 38.67 li
615.541 38.39 li
cp
616.821 40.22 mo
617.441 40.59 li
617.651 40.73 li
618.211 39.91 li
617.951 39.73 li
617.341 39.36 li
cp
618.441 41.29 mo
618.901 41.65 li
619.191 41.9 li
619.851 41.15 li
619.511 40.85 li
619.051 40.5 li
cp
619.881 42.57 mo
620.011 42.71 li
620.431 43.24 li
620.441 43.26 li
621.291 42.73 li
621.211 42.62 li
620.731 42.01 li
620.601 41.87 li
cp
620.891 44.08 mo
620.981 44.28 li
620.961 44.2 li
621.111 44.78 li
621.101 44.69 li
621.111 44.88 li
622.111 44.78 li
622.091 44.6 li
622.091 44.57 622.091 44.54 622.081 44.52 cv
621.921 43.94 li
621.911 43.91 621.901 43.89 621.891 43.86 cv
621.801 43.66 li
cp
621.131 45.76 mo
621.051 46.31 li
620.961 46.7 li
621.931 46.92 li
622.041 46.45 li
622.121 45.9 li
cp
620.681 47.59 mo
620.561 47.91 li
620.301 48.44 li
621.171 48.93 li
621.211 48.87 li
621.491 48.27 li
621.621 47.95 li
cp
619.801 49.28 mo
619.671 49.49 li
619.251 50.04 li
620.041 50.65 li
620.531 50 li
620.661 49.79 li
cp
618.641 50.77 mo
617.961 51.49 li
618.651 52.21 li
618.691 52.18 li
619.371 51.45 li
cp
617.241 52.13 mo
616.901 52.43 li
616.491 52.73 li
617.091 53.53 li
617.561 53.17 li
617.901 52.88 li
cp
615.721 53.3 mo
614.871 53.83 li
615.411 54.68 li
616.251 54.15 li
cp
614.041 54.31 mo
613.161 54.78 li
613.631 55.67 li
614.511 55.2 li
cp
612.281 55.18 mo
611.611 55.47 li
611.391 55.55 li
611.731 56.49 li
612.011 56.39 li
612.681 56.09 li
cp
610.451 55.89 mo
610.081 56.02 li
609.531 56.17 li
609.801 57.14 li
610.431 56.96 li
610.791 56.83 li
cp
608.561 56.44 mo
608.511 56.46 li
607.621 56.64 li
607.821 57.62 li
608.781 57.42 li
608.831 57.41 li
cp
606.671 56.81 mo
605.681 56.93 li
605.811 57.92 li
606.801 57.8 li
cp
604.731 57 mo
604.621 57.01 li
604.661 58.01 li
604.771 58 li
cp
610.221 53.35 mo
603.651 57.55 li
610.541 61.21 li
610.781 61.34 611.081 61.24 611.211 61 cv
611.341 60.76 611.251 60.45 611.011 60.32 cv
604.871 57.07 li
604.911 57.93 li
610.761 54.19 li
610.991 54.04 611.061 53.73 610.911 53.5 cv
610.761 53.27 610.461 53.2 610.221 53.35 cv
cp
.740688 .455604 .0273442 0 cmyk
f
142.971 120.6 mo
141.971 120.55 li
141.921 121.55 li
142.921 121.59 li
cp
141.011 120.49 mo
140.021 120.36 li
139.891 121.35 li
140.891 121.48 li
cp
139.081 120.19 mo
138.101 119.99 li
137.891 120.97 li
138.871 121.17 li
cp
137.171 119.72 mo
136.481 119.52 li
136.251 119.44 li
135.911 120.37 li
136.201 120.48 li
136.891 120.68 li
cp
135.311 119.09 mo
134.961 118.96 li
134.431 118.72 li
134.011 119.63 li
134.611 119.9 li
134.971 120.03 li
cp
133.521 118.3 mo
133.501 118.29 li
132.671 117.84 li
132.191 118.72 li
133.081 119.2 li
133.101 119.21 li
cp
131.841 117.36 mo
131.001 116.81 li
130.461 117.65 li
131.291 118.2 li
cp
130.231 116.24 mo
129.671 115.8 li
129.491 115.64 li
128.811 116.37 li
129.061 116.59 li
129.621 117.03 li
cp
128.751 114.96 mo
128.601 114.83 li
128.091 114.27 li
127.361 114.94 li
127.931 115.57 li
128.071 115.7 li
cp
127.481 113.54 mo
126.891 112.76 li
126.051 113.29 li
126.091 113.35 li
126.681 114.14 li
cp
126.421 111.93 mo
126.271 111.67 li
126.021 111.13 li
126.011 111.1 li
125.071 111.45 li
125.111 111.56 li
125.401 112.17 li
125.551 112.42 li
cp
125.701 110.19 mo
125.661 110.03 li
125.541 109.48 li
125.511 109.29 li
124.521 109.42 li
124.561 109.69 li
124.701 110.32 li
124.741 110.47 li
cp
125.451 108.4 mo
125.501 107.84 li
125.481 107.93 li
125.591 107.5 li
124.631 107.25 li
124.511 107.67 li
124.511 107.7 124.501 107.72 124.501 107.75 cv
124.451 108.31 li
cp
125.941 106.72 mo
126.201 106.28 li
126.461 105.94 li
125.681 105.33 li
125.341 105.76 li
125.081 106.21 li
cp
127.101 105.23 mo
127.131 105.21 li
127.731 104.67 li
127.791 104.62 li
127.171 103.83 li
127.051 103.92 li
126.391 104.52 li
126.371 104.55 li
cp
128.561 104.02 mo
129.181 103.59 li
129.361 103.47 li
128.831 102.63 li
128.611 102.77 li
127.991 103.2 li
cp
130.191 102.97 mo
130.961 102.54 li
131.051 102.49 li
130.601 101.6 li
130.471 101.67 li
129.711 102.09 li
cp
131.941 102.04 mo
131.951 102.03 li
132.831 101.62 li
132.411 100.71 li
131.501 101.14 li
131.491 101.15 li
cp
133.741 101.23 mo
134.161 101.05 li
134.651 100.86 li
134.281 99.93 li
133.761 100.13 li
133.341 100.31 li
cp
135.571 100.5 mo
136.511 100.16 li
136.171 99.22 li
135.231 99.56 li
cp
137.441 99.85 mo
137.901 99.7 li
138.391 99.55 li
138.101 98.6 li
137.591 98.75 li
137.131 98.9 li
cp
139.331 99.26 mo
140.301 98.99 li
140.021 98.03 li
139.061 98.3 li
cp
141.251 98.74 mo
142.111 98.52 li
142.211 98.5 li
141.991 97.53 li
141.871 97.56 li
141.011 97.77 li
cp
143.181 98.28 mo
144.161 98.07 li
143.941 97.09 li
142.961 97.31 li
cp
145.131 97.85 mo
145.141 97.85 li
146.101 97.67 li
145.921 96.69 li
144.921 96.87 li
cp
147.081 97.5 mo
148.071 97.32 li
147.891 96.34 li
146.911 96.51 li
cp
149.041 97.17 mo
150.031 97.03 li
149.891 96.04 li
148.901 96.18 li
cp
151.021 96.89 mo
151.551 96.82 li
151.991 96.77 li
151.891 95.78 li
151.411 95.83 li
150.881 95.9 li
cp
152.981 96.67 mo
153.981 96.57 li
153.881 95.57 li
152.881 95.68 li
cp
154.951 96.47 mo
155.951 96.41 li
155.891 95.41 li
154.891 95.47 li
cp
156.951 96.35 mo
157.951 96.29 li
157.891 95.29 li
156.891 95.35 li
cp
158.931 96.25 mo
159.931 96.23 li
159.911 95.23 li
158.911 95.25 li
cp
160.931 96.21 mo
161.711 96.19 li
161.911 96.2 li
161.931 95.2 li
161.681 95.19 li
160.911 95.21 li
cp
162.911 96.22 mo
163.911 96.24 li
163.931 95.24 li
162.931 95.22 li
cp
164.911 96.26 mo
165.131 96.26 li
165.881 96.31 li
165.951 95.31 li
165.151 95.26 li
164.931 95.26 li
cp
166.881 96.37 mo
167.881 96.43 li
167.941 95.43 li
166.941 95.37 li
cp
168.861 96.5 mo
169.851 96.6 li
169.951 95.61 li
168.961 95.51 li
cp
170.851 96.7 mo
171.841 96.8 li
171.941 95.8 li
170.951 95.7 li
cp
172.821 96.93 mo
173.811 97.07 li
173.941 96.07 li
172.951 95.94 li
cp
174.801 97.2 mo
175.121 97.25 li
175.761 97.36 li
175.941 96.38 li
175.261 96.25 li
174.931 96.21 li
cp
176.751 97.53 mo
177.731 97.71 li
177.911 96.72 li
176.921 96.55 li
cp
178.701 97.9 mo
179.681 98.11 li
179.891 97.13 li
178.911 96.92 li
cp
180.651 98.32 mo
181.291 98.45 li
181.611 98.53 li
181.861 97.56 li
181.501 97.48 li
180.861 97.34 li
cp
182.581 98.78 mo
182.741 98.82 li
183.541 99.03 li
183.801 98.07 li
182.981 97.85 li
182.821 97.81 li
cp
184.491 99.3 mo
185.451 99.58 li
185.731 98.63 li
184.771 98.34 li
cp
186.391 99.89 mo
186.811 100.02 li
187.321 100.2 li
187.661 99.26 li
187.121 99.07 li
186.701 98.94 li
cp
188.251 100.54 mo
189.191 100.89 li
189.541 99.96 li
188.611 99.6 li
cp
190.101 101.26 mo
190.391 101.38 li
191.001 101.66 li
191.411 100.75 li
190.771 100.46 li
190.481 100.34 li
cp
191.891 102.08 mo
192.461 102.36 li
192.761 102.53 li
193.241 101.65 li
192.901 101.46 li
192.331 101.18 li
cp
193.611 103.01 mo
194.231 103.38 li
194.441 103.52 li
195.001 102.69 li
194.751 102.52 li
194.131 102.15 li
cp
195.231 104.08 mo
195.701 104.44 li
195.991 104.69 li
196.641 103.94 li
196.301 103.64 li
195.841 103.29 li
cp
196.671 105.35 mo
196.811 105.5 li
197.231 106.03 li
197.231 106.05 li
198.081 105.52 li
198.011 105.41 li
197.531 104.8 li
197.391 104.66 li
cp
197.691 106.87 mo
197.781 107.07 li
197.751 106.99 li
197.911 107.57 li
197.891 107.48 li
197.911 107.66 li
198.911 107.57 li
198.891 107.39 li
198.891 107.36 198.881 107.33 198.871 107.31 cv
198.721 106.73 li
198.711 106.7 198.701 106.68 198.691 106.65 cv
198.601 106.45 li
cp
197.921 108.54 mo
197.841 109.1 li
197.761 109.49 li
198.731 109.71 li
198.831 109.24 li
198.911 108.68 li
cp
197.481 110.37 mo
197.361 110.7 li
197.101 111.23 li
197.971 111.72 li
198.001 111.66 li
198.291 111.06 li
198.421 110.73 li
cp
196.601 112.07 mo
196.471 112.29 li
196.051 112.83 li
196.841 113.44 li
197.331 112.8 li
197.461 112.58 li
cp
195.441 113.56 mo
194.761 114.28 li
195.451 115 li
195.491 114.97 li
196.171 114.24 li
cp
194.041 114.91 mo
193.701 115.22 li
193.291 115.51 li
193.891 116.32 li
194.361 115.96 li
194.701 115.66 li
cp
192.521 116.09 mo
191.681 116.62 li
192.211 117.47 li
193.061 116.93 li
cp
190.851 117.11 mo
189.961 117.58 li
190.431 118.46 li
191.321 117.99 li
cp
189.091 117.97 mo
188.401 118.27 li
188.191 118.34 li
188.531 119.28 li
188.811 119.18 li
189.491 118.89 li
cp
187.251 118.68 mo
186.881 118.82 li
186.331 118.97 li
186.601 119.93 li
187.221 119.76 li
187.591 119.62 li
cp
185.371 119.24 mo
185.311 119.26 li
184.431 119.43 li
184.631 120.41 li
185.581 120.22 li
185.641 120.2 li
cp
183.481 119.6 mo
182.491 119.73 li
182.611 120.72 li
183.611 120.6 li
cp
181.531 119.8 mo
181.411 119.81 li
181.451 120.81 li
181.571 120.8 li
cp
187.021 116.15 mo
180.441 120.35 li
187.331 124 li
187.581 124.13 187.881 124.04 188.011 123.8 cv
188.141 123.55 188.051 123.25 187.801 123.12 cv
181.671 119.86 li
181.701 120.73 li
187.561 116.99 li
187.791 116.84 187.861 116.53 187.711 116.3 cv
187.561 116.07 187.251 116 187.021 116.15 cv
cp
f
364.291 157.53 mo
363.291 157.49 li
363.251 158.49 li
364.251 158.53 li
cp
362.341 157.42 mo
361.341 157.3 li
361.221 158.29 li
362.211 158.41 li
cp
360.401 157.13 mo
359.421 156.92 li
359.221 157.9 li
360.201 158.11 li
cp
358.501 156.66 mo
357.801 156.46 li
357.581 156.37 li
357.231 157.31 li
357.521 157.42 li
358.221 157.62 li
cp
356.641 156.03 mo
356.281 155.9 li
355.751 155.65 li
355.341 156.56 li
355.941 156.84 li
356.291 156.97 li
cp
354.841 155.24 mo
354.831 155.23 li
353.991 154.78 li
353.521 155.66 li
354.411 156.14 li
354.431 156.15 li
cp
353.161 154.3 mo
352.331 153.75 li
351.781 154.59 li
352.621 155.13 li
cp
351.561 153.17 mo
350.991 152.74 li
350.811 152.57 li
350.141 153.31 li
350.381 153.53 li
350.951 153.97 li
cp
350.071 151.9 mo
349.931 151.77 li
349.421 151.21 li
348.681 151.88 li
349.261 152.51 li
349.401 152.64 li
cp
348.801 150.49 mo
348.221 149.69 li
347.371 150.23 li
347.411 150.29 li
348.001 151.08 li
cp
347.741 148.86 mo
347.601 148.61 li
347.351 148.07 li
347.341 148.04 li
346.401 148.39 li
346.441 148.49 li
346.731 149.11 li
346.871 149.36 li
cp
347.031 147.13 mo
346.981 146.97 li
346.861 146.41 li
346.841 146.22 li
345.851 146.36 li
345.891 146.63 li
346.021 147.25 li
346.071 147.41 li
cp
346.771 145.34 mo
346.821 144.79 li
346.811 144.87 li
346.921 144.44 li
345.951 144.19 li
345.841 144.62 li
345.831 144.64 345.831 144.67 345.821 144.7 cv
345.781 145.25 li
cp
347.261 143.66 mo
347.521 143.22 li
347.791 142.88 li
347.001 142.27 li
346.671 142.71 li
346.411 143.14 li
cp
348.431 142.17 mo
348.451 142.14 li
349.051 141.6 li
349.111 141.55 li
348.501 140.77 li
348.381 140.86 li
347.721 141.46 li
347.701 141.49 li
cp
349.881 140.96 mo
350.511 140.52 li
350.691 140.41 li
350.161 139.56 li
349.941 139.71 li
349.311 140.14 li
cp
351.521 139.91 mo
352.281 139.48 li
352.381 139.43 li
351.921 138.54 li
351.791 138.61 li
351.031 139.03 li
cp
353.271 138.97 mo
353.281 138.97 li
354.161 138.56 li
353.741 137.65 li
352.821 138.08 li
cp
355.061 138.17 mo
355.481 137.99 li
355.971 137.79 li
355.611 136.86 li
355.091 137.07 li
354.671 137.25 li
cp
356.901 137.44 mo
357.841 137.1 li
357.491 136.16 li
356.551 136.5 li
cp
358.771 136.79 mo
359.231 136.64 li
359.711 136.49 li
359.421 135.53 li
358.921 135.69 li
358.461 135.84 li
cp
360.661 136.2 mo
361.621 135.94 li
361.351 134.97 li
360.391 135.24 li
cp
362.581 135.68 mo
363.441 135.46 li
363.531 135.44 li
363.311 134.47 li
363.191 134.49 li
362.331 134.71 li
cp
364.511 135.22 mo
365.481 135 li
365.271 134.03 li
364.291 134.25 li
cp
366.461 134.78 mo
366.461 134.78 li
367.421 134.61 li
367.241 133.62 li
366.251 133.81 li
366.241 133.81 li
cp
368.411 134.43 mo
369.391 134.25 li
369.211 133.27 li
368.231 133.45 li
cp
370.361 134.11 mo
371.351 133.97 li
371.211 132.98 li
370.221 133.12 li
cp
372.341 133.83 mo
372.871 133.76 li
373.321 133.71 li
373.211 132.72 li
372.741 132.76 li
372.201 132.84 li
cp
374.311 133.61 mo
375.301 133.51 li
375.201 132.51 li
374.211 132.61 li
cp
376.281 133.41 mo
377.281 133.35 li
377.211 132.35 li
376.221 132.41 li
cp
378.281 133.28 mo
379.271 133.22 li
379.211 132.22 li
378.211 132.28 li
cp
380.251 133.18 mo
381.251 133.16 li
381.231 132.16 li
380.231 132.18 li
cp
382.251 133.15 mo
383.031 133.13 li
383.231 133.13 li
383.251 132.13 li
383.011 132.13 li
382.231 132.15 li
cp
384.231 133.15 mo
385.231 133.17 li
385.251 132.17 li
384.251 132.15 li
cp
386.231 133.19 mo
386.451 133.2 li
387.211 133.24 li
387.271 132.25 li
386.471 132.2 li
386.251 132.19 li
cp
388.211 133.31 mo
389.201 133.37 li
389.271 132.37 li
388.271 132.31 li
cp
390.181 133.44 mo
391.181 133.54 li
391.281 132.54 li
390.281 132.45 li
cp
392.171 133.64 mo
393.171 133.73 li
393.271 132.74 li
392.271 132.64 li
cp
394.141 133.87 mo
395.131 134 li
395.271 133.01 li
394.281 132.88 li
cp
396.121 134.14 mo
396.441 134.18 li
397.091 134.3 li
397.261 133.31 li
396.581 133.19 li
396.261 133.15 li
cp
398.071 134.47 mo
399.061 134.65 li
399.231 133.66 li
398.251 133.49 li
cp
400.021 134.83 mo
401.001 135.04 li
401.211 134.07 li
400.231 133.86 li
cp
401.981 135.25 mo
402.621 135.39 li
402.941 135.47 li
403.181 134.5 li
402.831 134.41 li
402.191 134.28 li
cp
403.911 135.72 mo
404.061 135.75 li
404.861 135.97 li
405.121 135.01 li
404.311 134.79 li
404.151 134.75 li
cp
405.821 136.24 mo
406.771 136.52 li
407.061 135.56 li
406.101 135.28 li
cp
407.711 136.82 mo
408.131 136.96 li
408.651 137.14 li
408.981 136.2 li
408.441 136.01 li
408.021 135.87 li
cp
409.581 137.47 mo
410.511 137.83 li
410.871 136.89 li
409.931 136.54 li
cp
411.431 138.2 mo
411.711 138.32 li
412.321 138.6 li
412.741 137.69 li
412.091 137.4 li
411.811 137.28 li
cp
413.211 139.02 mo
413.781 139.3 li
414.091 139.47 li
414.561 138.59 li
414.221 138.41 li
413.661 138.13 li
cp
414.941 139.94 mo
415.561 140.32 li
415.771 140.46 li
416.321 139.63 li
416.081 139.47 li
415.461 139.09 li
cp
416.561 141.02 mo
417.021 141.37 li
417.311 141.63 li
417.971 140.88 li
417.631 140.58 li
417.171 140.23 li
cp
417.991 142.29 mo
418.131 142.44 li
418.551 142.97 li
418.561 142.99 li
419.411 142.46 li
419.341 142.35 li
418.861 141.75 li
418.721 141.6 li
cp
419.011 143.8 mo
419.101 144.01 li
419.081 143.94 li
419.241 144.51 li
419.221 144.43 li
419.241 144.6 li
420.231 144.51 li
420.221 144.34 li
420.211 144.31 420.211 144.28 420.201 144.25 cv
420.041 143.67 li
420.041 143.65 420.031 143.62 420.021 143.6 cv
419.921 143.39 li
cp
419.251 145.48 mo
419.171 146.04 li
419.081 146.43 li
420.061 146.65 li
420.161 146.19 li
420.241 145.62 li
cp
418.811 147.31 mo
418.681 147.65 li
418.431 148.16 li
419.291 148.66 li
419.331 148.6 li
419.611 148 li
419.741 147.67 li
cp
417.921 149.01 mo
417.791 149.23 li
417.381 149.77 li
418.171 150.38 li
418.661 149.74 li
418.791 149.52 li
cp
416.771 150.5 mo
416.081 151.22 li
416.781 151.94 li
416.811 151.91 li
417.501 151.18 li
cp
415.371 151.85 mo
415.021 152.15 li
414.621 152.45 li
415.211 153.25 li
415.681 152.9 li
416.021 152.6 li
cp
413.841 153.03 mo
413.001 153.56 li
413.541 154.41 li
414.381 153.87 li
cp
412.171 154.05 mo
411.291 154.52 li
411.761 155.4 li
412.641 154.93 li
cp
410.411 154.91 mo
409.731 155.2 li
409.521 155.28 li
409.861 156.22 li
410.131 156.12 li
410.811 155.82 li
cp
408.581 155.62 mo
408.211 155.75 li
407.661 155.91 li
407.931 156.87 li
408.551 156.7 li
408.921 156.56 li
cp
406.691 156.18 mo
406.641 156.19 li
405.751 156.37 li
405.951 157.35 li
406.911 157.16 li
406.961 157.14 li
cp
404.811 156.54 mo
403.811 156.66 li
403.931 157.65 li
404.931 157.53 li
cp
402.861 156.73 mo
402.741 156.74 li
402.781 157.74 li
402.901 157.73 li
cp
408.331 153.06 mo
401.771 157.28 li
408.681 160.91 li
408.921 161.04 409.221 160.95 409.351 160.7 cv
409.481 160.46 409.391 160.15 409.141 160.03 cv
402.991 156.8 li
403.031 157.66 li
408.871 153.9 li
409.101 153.75 409.171 153.44 409.021 153.2 cv
408.871 152.97 408.561 152.91 408.331 153.06 cv
cp
f
427.651 173.19 mo
465.151 173.19 li
465.151 149.393 li
427.651 149.393 li
cp
.721096 .438056 .0239261 0 cmyk
ef
427.651 173.19 mo
465.151 173.19 li
465.151 149.393 li
427.651 149.393 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
437.481 167.33 mo
(T1)
[8.75998 0 ]xsh
455.361 167.33 mo
( )sh
546.901 140.8 mo
584.401 140.8 li
584.401 117.003 li
546.901 117.003 li
cp
.721096 .438056 .0239261 0 cmyk
ef
546.901 140.8 mo
584.401 140.8 li
584.401 117.003 li
546.901 117.003 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
556.761 134.93 mo
(T2)
[8.76001 0 ]xsh
574.641 134.93 mo
( )sh
465.331 161.76 mo
546.161 129.73 li
545.791 128.8 li
464.961 160.83 li
cp
542.081 135.04 mo
546.901 128.9 li
539.181 127.73 li
538.911 127.68 538.651 127.87 538.611 128.14 cv
538.571 128.42 538.761 128.67 539.031 128.71 cv
545.901 129.76 li
545.581 128.95 li
541.291 134.42 li
541.121 134.64 541.161 134.95 541.381 135.12 cv
541.591 135.29 541.911 135.25 542.081 135.04 cv
cp
.740688 .455604 .0273442 0 cmyk
f
546.901 199.75 mo
584.401 199.75 li
584.401 175.953 li
546.901 175.953 li
cp
.721096 .438056 .0239261 0 cmyk
ef
546.901 199.75 mo
584.401 199.75 li
584.401 175.953 li
546.901 175.953 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 84 /T put
dup 146 /quoteright put
def
/FontBBox {-503 -307 1240 964} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F1
4E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2
CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE715
28F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE0
9822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95
265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543A
B1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C
81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53D
FF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9
F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD67
9CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F
99BE2DC9C90C6E2171BED79C2858C6> |-
/T <1C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AEC72
0DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F19EB
2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD434
CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F574C
6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4E7B
6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E84766
9D322216405EAED7> |-
/quoteright <1C60D8A8C9B8707CDC94303E37DBF814430AE13F466399AF45F
4E2B3F89F1331392514CB2CC316EBDD1ED64213514C809EB3DE2C0E51BF343AF
1E2D2172C7FC5B88D1E2483154F0B2F142C199067BB94ED6CCDBEA1D87A6A43C
0E6DE33C235013A584D74F400F48B067A133859AA79832E88C5D96E9349092CC
48DB7AD229E7276B19762957ECC66EACF2162CEC78C94CF76E3E6C9C47CF30E4
7D165CEEEF5666DF36F79> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/WVTSUX+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/WVTSUX+Calibri*1 
[50{/.notdef}rp /two 33{/.notdef}rp /T 61{/.notdef}rp /quoteright 109{/.notdef}rp]
WVTSUX+Calibri nf
WVTSUX+Calibri*1 [18 0 0 -18 0 0 ]msf
554.601 193.9 mo
(T2\222)
[8.75995 9.12 0 ]xsh
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
576.921 193.9 mo
( )sh
465.301 160.81 mo
546.111 187.07 li
545.801 188.02 li
464.991 161.77 li
cp
541.701 182.03 mo
546.901 187.85 li
539.271 189.51 li
539.001 189.57 538.741 189.39 538.681 189.12 cv
538.621 188.86 538.791 188.59 539.061 188.53 cv
545.851 187.06 li
545.581 187.88 li
540.961 182.69 li
540.771 182.49 540.791 182.17 541.001 181.99 cv
541.201 181.8 541.521 181.82 541.701 182.03 cv
cp
.740688 .455604 .0273442 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D9
7848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16
B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D3
8BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08AD
A9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6
E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B
3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B8657
13255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF8009
5A893636D91177B06233710432F07D42A84BDDC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five 6{/.notdef}rp /less /equal /greater 4{/.notdef}rp /C /D 
11{/.notdef}rp /P 3{/.notdef}rp /T 3{/.notdef}rp /X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
433.041 141.26 mo
(CDP10)
[9.59409 11.0701 9.21597 9.12607 0 ]xsh
481.161 141.26 mo
( )sh
471.151 151.78 mo
483.151 151.78 li
483.151 144.067 li
471.151 144.067 li
cp
0 .490333 .803677 0 cmyk
ef
471.151 151.78 mo
483.151 151.78 li
483.151 144.067 li
471.151 144.067 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
487.651 146.15 mo
499.651 146.15 li
499.651 138.437 li
487.651 138.437 li
cp
0 .490333 .803677 0 cmyk
ef
487.651 146.15 mo
499.651 146.15 li
499.651 138.437 li
487.651 138.437 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
519.651 134.12 mo
531.651 134.12 li
531.651 126.407 li
519.651 126.407 li
cp
0 .490333 .803677 0 cmyk
ef
519.651 134.12 mo
531.651 134.12 li
531.651 126.407 li
519.651 126.407 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
503.401 139.75 mo
515.401 139.75 li
515.401 132.037 li
503.401 132.037 li
cp
0 .490333 .803677 0 cmyk
ef
503.401 139.75 mo
515.401 139.75 li
515.401 132.037 li
503.401 132.037 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
471.151 177.05 mo
483.151 177.05 li
483.151 169.337 li
471.151 169.337 li
cp
0 .490333 .803677 0 cmyk
ef
471.151 177.05 mo
483.151 177.05 li
483.151 169.337 li
471.151 169.337 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
487.151 181.64 mo
499.151 181.64 li
499.151 173.927 li
487.151 173.927 li
cp
0 .490333 .803677 0 cmyk
ef
487.151 181.64 mo
499.151 181.64 li
499.151 173.927 li
487.151 173.927 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
519.651 193.7 mo
531.651 193.7 li
531.651 185.987 li
519.651 185.987 li
cp
0 .490333 .803677 0 cmyk
ef
519.651 193.7 mo
531.651 193.7 li
531.651 185.987 li
519.651 185.987 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
503.651 188.5 mo
515.651 188.5 li
515.651 180.787 li
503.651 180.787 li
cp
0 .490333 .803677 0 cmyk
ef
503.651 188.5 mo
515.651 188.5 li
515.651 180.787 li
503.651 180.787 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
546.921 129.15 mo
545.931 129.11 li
545.881 130.11 li
546.881 130.15 li
cp
544.971 129.04 mo
543.981 128.92 li
543.851 129.91 li
544.841 130.03 li
cp
543.031 128.75 mo
542.051 128.54 li
541.851 129.52 li
542.831 129.73 li
cp
541.131 128.28 mo
540.431 128.08 li
540.211 127.99 li
539.861 128.93 li
540.161 129.04 li
540.851 129.24 li
cp
539.271 127.65 mo
538.911 127.52 li
538.381 127.27 li
537.971 128.18 li
538.571 128.46 li
538.921 128.59 li
cp
537.481 126.86 mo
537.461 126.85 li
536.631 126.4 li
536.151 127.28 li
537.041 127.76 li
537.061 127.77 li
cp
535.801 125.92 mo
534.961 125.37 li
534.411 126.21 li
535.251 126.75 li
cp
534.191 124.79 mo
533.621 124.36 li
533.441 124.19 li
532.771 124.93 li
533.011 125.15 li
533.581 125.59 li
cp
532.711 123.52 mo
532.561 123.39 li
532.051 122.83 li
531.311 123.5 li
531.891 124.13 li
532.031 124.26 li
cp
531.441 122.11 mo
530.851 121.31 li
530.011 121.85 li
530.051 121.91 li
530.631 122.7 li
cp
530.371 120.48 mo
530.231 120.23 li
529.981 119.69 li
529.971 119.66 li
529.031 120.01 li
529.071 120.11 li
529.361 120.73 li
529.511 120.98 li
cp
529.661 118.75 mo
529.611 118.59 li
529.501 118.03 li
529.471 117.84 li
528.481 117.98 li
528.521 118.25 li
528.651 118.87 li
528.701 119.03 li
cp
529.401 116.96 mo
529.451 116.41 li
529.441 116.49 li
529.551 116.06 li
528.581 115.81 li
528.471 116.24 li
528.461 116.26 528.461 116.29 528.461 116.32 cv
528.411 116.87 li
cp
529.891 115.28 mo
530.161 114.84 li
530.421 114.5 li
529.631 113.89 li
529.301 114.33 li
529.041 114.76 li
cp
531.061 113.79 mo
531.081 113.76 li
531.681 113.22 li
531.751 113.17 li
531.131 112.39 li
531.011 112.48 li
530.351 113.08 li
530.331 113.11 li
cp
532.521 112.58 mo
533.141 112.14 li
533.321 112.03 li
532.791 111.18 li
532.571 111.33 li
531.941 111.76 li
cp
534.161 111.53 mo
534.921 111.1 li
535.011 111.05 li
534.561 110.16 li
534.421 110.23 li
533.671 110.65 li
cp
535.901 110.59 mo
535.911 110.59 li
536.791 110.18 li
536.371 109.27 li
535.451 109.7 li
cp
537.691 109.79 mo
538.111 109.61 li
538.611 109.41 li
538.241 108.48 li
537.721 108.69 li
537.301 108.87 li
cp
539.531 109.06 mo
540.471 108.72 li
540.131 107.78 li
539.191 108.12 li
cp
541.401 108.41 mo
541.861 108.26 li
542.351 108.11 li
542.051 107.15 li
541.551 107.31 li
541.091 107.46 li
cp
543.291 107.82 mo
544.251 107.56 li
543.991 106.59 li
543.021 106.86 li
cp
545.211 107.3 mo
546.071 107.08 li
546.171 107.06 li
545.951 106.09 li
545.831 106.11 li
544.961 106.33 li
cp
547.141 106.84 mo
548.121 106.62 li
547.901 105.65 li
546.921 105.87 li
cp
549.091 106.4 mo
549.101 106.4 li
550.061 106.23 li
549.881 105.24 li
548.881 105.43 li
548.871 105.43 li
cp
551.041 106.05 mo
552.021 105.87 li
551.841 104.89 li
550.861 105.07 li
cp
552.991 105.73 mo
553.981 105.59 li
553.841 104.6 li
552.851 104.74 li
cp
554.971 105.45 mo
555.511 105.38 li
555.951 105.33 li
555.851 104.34 li
555.371 104.38 li
554.841 104.46 li
cp
556.941 105.23 mo
557.941 105.13 li
557.841 104.13 li
556.841 104.23 li
cp
558.911 105.03 mo
559.911 104.97 li
559.851 103.97 li
558.851 104.03 li
cp
560.911 104.9 mo
561.911 104.84 li
561.841 103.84 li
560.851 103.9 li
cp
562.881 104.8 mo
563.881 104.78 li
563.861 103.78 li
562.861 103.8 li
cp
564.881 104.77 mo
565.661 104.75 li
565.861 104.75 li
565.881 103.75 li
565.641 103.75 li
564.861 103.77 li
cp
566.861 104.77 mo
567.861 104.79 li
567.881 103.79 li
566.881 103.77 li
cp
568.861 104.81 mo
569.091 104.82 li
569.841 104.86 li
569.901 103.87 li
569.101 103.82 li
568.881 103.81 li
cp
570.841 104.93 mo
571.841 104.99 li
571.901 103.99 li
570.901 103.93 li
cp
572.821 105.06 mo
573.811 105.16 li
573.911 104.16 li
572.911 104.07 li
cp
574.811 105.26 mo
575.801 105.35 li
575.901 104.36 li
574.901 104.26 li
cp
576.771 105.49 mo
577.761 105.62 li
577.901 104.63 li
576.911 104.5 li
cp
578.751 105.76 mo
579.081 105.8 li
579.721 105.92 li
579.901 104.93 li
579.211 104.81 li
578.891 104.77 li
cp
580.711 106.09 mo
581.691 106.27 li
581.871 105.28 li
580.881 105.11 li
cp
582.661 106.45 mo
583.631 106.66 li
583.841 105.69 li
582.871 105.48 li
cp
584.611 106.87 mo
585.251 107.01 li
585.571 107.09 li
585.811 106.12 li
585.461 106.03 li
584.821 105.9 li
cp
586.541 107.34 mo
586.701 107.37 li
587.501 107.59 li
587.761 106.63 li
586.941 106.41 li
586.781 106.37 li
cp
588.451 107.86 mo
589.411 108.14 li
589.691 107.18 li
588.731 106.9 li
cp
590.351 108.44 mo
590.771 108.58 li
591.281 108.76 li
591.611 107.82 li
591.071 107.63 li
590.651 107.49 li
cp
592.211 109.09 mo
593.151 109.45 li
593.501 108.51 li
592.571 108.16 li
cp
594.061 109.82 mo
594.341 109.94 li
594.961 110.22 li
595.371 109.31 li
594.731 109.02 li
594.441 108.9 li
cp
595.841 110.64 mo
596.411 110.92 li
596.721 111.09 li
597.191 110.21 li
596.861 110.03 li
596.291 109.75 li
cp
597.571 111.56 mo
598.191 111.94 li
598.401 112.08 li
598.951 111.25 li
598.711 111.09 li
598.091 110.71 li
cp
599.191 112.64 mo
599.651 112.99 li
599.941 113.25 li
600.601 112.5 li
600.261 112.2 li
599.801 111.85 li
cp
600.631 113.91 mo
600.771 114.06 li
601.191 114.59 li
601.191 114.61 li
602.041 114.08 li
601.971 113.97 li
601.491 113.37 li
601.351 113.22 li
cp
601.641 115.42 mo
601.741 115.63 li
601.711 115.56 li
601.871 116.13 li
601.851 116.05 li
601.871 116.22 li
602.861 116.13 li
602.851 115.96 li
602.851 115.93 602.841 115.9 602.831 115.87 cv
602.671 115.29 li
602.671 115.27 602.661 115.24 602.651 115.22 cv
602.551 115.01 li
cp
601.881 117.1 mo
601.801 117.66 li
601.721 118.05 li
602.691 118.27 li
602.791 117.81 li
602.871 117.24 li
cp
601.441 118.93 mo
601.311 119.27 li
601.061 119.78 li
601.931 120.28 li
601.961 120.22 li
602.251 119.62 li
602.371 119.29 li
cp
600.561 120.63 mo
600.431 120.85 li
600.011 121.39 li
600.801 122 li
601.291 121.36 li
601.421 121.14 li
cp
599.401 122.12 mo
598.721 122.84 li
599.411 123.56 li
599.441 123.53 li
600.131 122.8 li
cp
598.001 123.47 mo
597.661 123.77 li
597.251 124.07 li
597.851 124.87 li
598.311 124.52 li
598.661 124.22 li
cp
596.481 124.65 mo
595.631 125.18 li
596.171 126.03 li
597.011 125.49 li
cp
594.801 125.67 mo
593.921 126.14 li
594.391 127.02 li
595.271 126.55 li
cp
593.041 126.53 mo
592.361 126.82 li
592.151 126.9 li
592.491 127.84 li
592.761 127.74 li
593.441 127.44 li
cp
591.211 127.24 mo
590.841 127.37 li
590.291 127.53 li
590.561 128.49 li
591.181 128.32 li
591.551 128.18 li
cp
589.331 127.8 mo
589.271 127.81 li
588.381 127.99 li
588.581 128.97 li
589.541 128.78 li
589.601 128.76 li
cp
587.441 128.16 mo
586.451 128.28 li
586.571 129.27 li
587.561 129.15 li
cp
585.491 128.35 mo
585.371 128.36 li
585.411 129.36 li
585.531 129.35 li
cp
590.961 124.68 mo
584.401 128.9 li
591.311 132.53 li
591.551 132.66 591.861 132.57 591.981 132.32 cv
592.111 132.08 592.021 131.77 591.771 131.65 cv
585.621 128.42 li
585.661 129.28 li
591.501 125.52 li
591.731 125.37 591.801 125.06 591.651 124.82 cv
591.501 124.59 591.191 124.53 590.961 124.68 cv
cp
.740688 .455604 .0273442 0 cmyk
f
546.921 188.1 mo
545.931 188.06 li
545.881 189.06 li
546.881 189.1 li
cp
544.971 187.99 mo
543.981 187.87 li
543.851 188.86 li
544.841 188.98 li
cp
543.031 187.7 mo
542.051 187.49 li
541.851 188.47 li
542.831 188.68 li
cp
541.131 187.23 mo
540.431 187.03 li
540.211 186.94 li
539.861 187.88 li
540.161 187.99 li
540.851 188.19 li
cp
539.271 186.6 mo
538.911 186.47 li
538.381 186.22 li
537.971 187.13 li
538.571 187.41 li
538.921 187.54 li
cp
537.481 185.81 mo
537.461 185.8 li
536.631 185.35 li
536.151 186.23 li
537.041 186.71 li
537.061 186.72 li
cp
535.801 184.87 mo
534.961 184.32 li
534.411 185.16 li
535.251 185.7 li
cp
534.191 183.74 mo
533.621 183.31 li
533.441 183.14 li
532.771 183.88 li
533.011 184.1 li
533.581 184.54 li
cp
532.711 182.47 mo
532.561 182.34 li
532.051 181.78 li
531.311 182.45 li
531.891 183.08 li
532.031 183.21 li
cp
531.441 181.06 mo
530.851 180.26 li
530.011 180.8 li
530.051 180.86 li
530.631 181.65 li
cp
530.371 179.43 mo
530.231 179.18 li
529.981 178.64 li
529.971 178.61 li
529.031 178.96 li
529.071 179.06 li
529.361 179.68 li
529.511 179.93 li
cp
529.661 177.7 mo
529.611 177.54 li
529.501 176.98 li
529.471 176.79 li
528.481 176.93 li
528.521 177.2 li
528.651 177.82 li
528.701 177.98 li
cp
529.401 175.91 mo
529.451 175.36 li
529.441 175.44 li
529.551 175.01 li
528.581 174.76 li
528.471 175.19 li
528.461 175.21 528.461 175.24 528.461 175.27 cv
528.411 175.82 li
cp
529.901 174.23 mo
530.161 173.79 li
530.421 173.45 li
529.631 172.84 li
529.301 173.28 li
529.041 173.71 li
cp
531.061 172.74 mo
531.081 172.71 li
531.681 172.17 li
531.751 172.12 li
531.131 171.34 li
531.011 171.43 li
530.351 172.03 li
530.331 172.06 li
cp
532.521 171.53 mo
533.141 171.09 li
533.321 170.98 li
532.791 170.13 li
532.571 170.28 li
531.941 170.71 li
cp
534.161 170.48 mo
534.921 170.05 li
535.011 170 li
534.561 169.11 li
534.421 169.18 li
533.671 169.6 li
cp
535.901 169.54 mo
535.911 169.54 li
536.791 169.13 li
536.371 168.22 li
535.451 168.65 li
cp
537.701 168.74 mo
538.111 168.57 li
538.611 168.37 li
538.241 167.44 li
537.721 167.64 li
537.311 167.82 li
cp
539.531 168.02 mo
540.471 167.68 li
540.131 166.74 li
539.191 167.08 li
cp
541.411 167.36 mo
541.861 167.21 li
542.351 167.07 li
542.061 166.11 li
541.551 166.27 li
541.091 166.42 li
cp
543.291 166.78 mo
544.261 166.51 li
543.991 165.54 li
543.021 165.82 li
cp
545.211 166.25 mo
546.071 166.03 li
546.171 166.01 li
545.951 165.04 li
545.831 165.06 li
544.961 165.28 li
cp
547.141 165.79 mo
548.121 165.58 li
547.901 164.6 li
546.931 164.82 li
cp
549.101 165.36 mo
549.101 165.36 li
550.061 165.19 li
549.881 164.2 li
548.881 164.38 li
cp
551.041 165.01 mo
552.031 164.83 li
551.851 163.84 li
550.861 164.02 li
cp
553.001 164.68 mo
553.991 164.54 li
553.851 163.55 li
552.861 163.69 li
cp
554.981 164.4 mo
555.511 164.33 li
555.951 164.28 li
555.851 163.29 li
555.371 163.33 li
554.841 163.41 li
cp
556.941 164.18 mo
557.941 164.08 li
557.841 163.09 li
556.841 163.19 li
cp
558.921 163.99 mo
559.911 163.92 li
559.851 162.92 li
558.851 162.99 li
cp
560.911 163.86 mo
561.911 163.8 li
561.851 162.8 li
560.851 162.86 li
cp
562.891 163.76 mo
563.891 163.74 li
563.871 162.74 li
562.871 162.76 li
cp
564.891 163.72 mo
565.661 163.71 li
565.871 163.71 li
565.891 162.71 li
565.641 162.71 li
564.871 162.72 li
cp
566.871 163.73 mo
567.871 163.75 li
567.891 162.75 li
566.891 162.73 li
cp
568.871 163.77 mo
569.091 163.77 li
569.841 163.82 li
569.911 162.82 li
569.101 162.78 li
568.891 162.77 li
cp
570.841 163.88 mo
571.841 163.94 li
571.901 162.95 li
570.901 162.89 li
cp
572.821 164.02 mo
573.811 164.12 li
573.911 163.12 li
572.921 163.02 li
cp
574.811 164.21 mo
575.801 164.31 li
575.901 163.32 li
574.911 163.22 li
cp
576.781 164.44 mo
577.771 164.58 li
577.901 163.59 li
576.911 163.45 li
cp
578.761 164.72 mo
579.081 164.76 li
579.721 164.88 li
579.901 163.89 li
579.211 163.77 li
578.891 163.73 li
cp
580.711 165.05 mo
581.691 165.22 li
581.871 164.24 li
580.881 164.07 li
cp
582.661 165.41 mo
583.641 165.62 li
583.851 164.64 li
582.871 164.43 li
cp
584.611 165.83 mo
585.251 165.97 li
585.571 166.05 li
585.821 165.08 li
585.461 164.99 li
584.821 164.85 li
cp
586.541 166.29 mo
586.701 166.33 li
587.501 166.55 li
587.761 165.59 li
586.941 165.36 li
586.791 165.32 li
cp
588.451 166.82 mo
589.411 167.1 li
589.691 166.14 li
588.731 165.86 li
cp
590.351 167.4 mo
590.771 167.53 li
591.291 167.71 li
591.621 166.77 li
591.071 166.58 li
590.661 166.45 li
cp
592.221 168.05 mo
593.151 168.4 li
593.511 167.47 li
592.571 167.11 li
cp
594.061 168.78 mo
594.341 168.9 li
594.961 169.17 li
595.371 168.26 li
594.731 167.97 li
594.441 167.86 li
cp
595.851 169.59 mo
596.411 169.87 li
596.721 170.04 li
597.201 169.16 li
596.861 168.98 li
596.291 168.7 li
cp
597.571 170.52 mo
598.191 170.9 li
598.401 171.04 li
598.961 170.21 li
598.711 170.04 li
598.091 169.67 li
cp
599.201 171.6 mo
599.661 171.95 li
599.941 172.2 li
600.601 171.45 li
600.261 171.15 li
599.801 170.8 li
cp
600.631 172.87 mo
600.771 173.01 li
601.191 173.54 li
601.191 173.56 li
602.051 173.04 li
601.971 172.92 li
601.491 172.32 li
601.351 172.18 li
cp
601.651 174.38 mo
601.741 174.58 li
601.711 174.51 li
601.871 175.08 li
601.851 175 li
601.871 175.18 li
602.861 175.09 li
602.851 174.91 li
602.851 174.88 602.841 174.85 602.831 174.82 cv
602.671 174.24 li
602.671 174.22 602.661 174.19 602.651 174.17 cv
602.551 173.96 li
cp
601.881 176.06 mo
601.801 176.61 li
601.711 177 li
602.691 177.22 li
602.791 176.76 li
602.871 176.2 li
cp
601.441 177.89 mo
601.311 178.21 li
601.061 178.74 li
601.931 179.24 li
601.961 179.17 li
602.251 178.58 li
602.371 178.25 li
cp
600.561 179.58 mo
600.431 179.8 li
600.001 180.34 li
600.801 180.95 li
601.291 180.31 li
601.411 180.09 li
cp
599.401 181.07 mo
598.721 181.79 li
599.411 182.52 li
599.441 182.48 li
600.121 181.76 li
cp
597.991 182.43 mo
597.651 182.73 li
597.251 183.03 li
597.851 183.83 li
598.321 183.48 li
598.661 183.18 li
cp
596.481 183.6 mo
595.631 184.14 li
596.161 184.98 li
597.011 184.45 li
cp
594.801 184.62 mo
593.911 185.09 li
594.381 185.97 li
595.271 185.5 li
cp
593.041 185.48 mo
592.361 185.77 li
592.141 185.85 li
592.481 186.79 li
592.761 186.69 li
593.441 186.4 li
cp
591.201 186.19 mo
590.841 186.32 li
590.291 186.48 li
590.551 187.44 li
591.181 187.27 li
591.541 187.13 li
cp
589.321 186.75 mo
589.271 186.76 li
588.381 186.94 li
588.581 187.92 li
589.541 187.73 li
589.591 187.71 li
cp
587.431 187.11 mo
586.441 187.24 li
586.561 188.23 li
587.561 188.1 li
cp
585.491 187.31 mo
585.371 187.31 li
585.411 188.31 li
585.531 188.31 li
cp
590.981 183.65 mo
584.401 187.85 li
591.291 191.51 li
591.541 191.64 591.841 191.55 591.971 191.3 cv
592.101 191.06 592.011 190.76 591.761 190.63 cv
585.631 187.37 li
585.661 188.23 li
591.521 184.5 li
591.751 184.35 591.821 184.04 591.671 183.81 cv
591.521 183.57 591.211 183.51 590.981 183.65 cv
cp
f
21.8189 250.56 mo
59.3189 250.56 li
59.3189 226.763 li
21.8189 226.763 li
cp
.721096 .438056 .0239261 0 cmyk
ef
21.8189 250.56 mo
59.3189 250.56 li
59.3189 226.763 li
21.8189 226.763 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
31.5949 244.73 mo
(T1)
[8.75999 0 ]xsh
49.4749 244.73 mo
( )sh
59.3269 239.16 mo
130.191 238.01 li
130.171 237.01 li
59.3109 238.16 li
cp
124.501 241.54 mo
131.171 237.49 li
124.371 233.67 li
124.131 233.54 123.821 233.62 123.691 233.86 cv
123.551 234.1 123.641 234.41 123.881 234.54 cv
129.941 237.95 li
129.921 237.08 li
123.981 240.68 li
123.741 240.82 123.671 241.13 123.811 241.37 cv
123.951 241.6 124.261 241.68 124.501 241.54 cv
cp
.740688 .455604 .0273442 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A0860A364A1C4BD4224B64164DA02FBCB4B7345339E2A8
52FD73E42DE7B33A3E7CFB23D9B5B8828A7C7D03CC2719F783D654783B633B73
A159EC40ED3395FD8B11AAD632B5F29C41331F1B36125BA7D1997B676C8B10E4
336915C40AB6B715EB23A1290DE9BC0FC782B3F347C05ADDB685745560E028E6
D97D9B35BCB3F2E559B2DC5C5BA08FC08878230072154C5ED21DC85222CEE603
D2207BBABB8920C302B640B67339B888C31AFFCD44289945C30BE18E4BB99D4A
64979385EA488C3253806E2D6260691D0C13654DD70C80A76BBEC3A015B5ED35
3B26EFCFEEB6FE090864A2CDC657CC530BBBC6E4432DD73860472AE853F0A442
CE33C314B6FB1A984BFFA8B424295E2E940122AF725F7E4DA2F35898F6EE04DB
FD7E3B4D0DE9D4BE8784F49E3C23BC8B8AF125653EE8B0C9AAC11F53D23578DB
44B0D0AE9BFCADB8B50F9B84D1369F9276D7D311EED812EA2436CC31922AF348
437A5A953DC50D5D5FA6A0F3539C2875F47124A85A390502719CA13B79152707
92BEC2AFCFF9F604488CC0865FE1B7A6F72DFBD2EEA384F569C8F80EFA751CBA
37C08B0FB2064FF9BEB6D7BCAD5976B48494092CB6C87915EF1610> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 5{/.notdef}rp /less /equal /greater 4{/.notdef}rp /C 
/D 11{/.notdef}rp /P 3{/.notdef}rp /T 3{/.notdef}rp /X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18.024 0 0 -18.024 0 0 ]msf
11.0269 224.74 mo
(CDP6)
[9.60688 11.0849 9.19221 0 ]xsh
50.0269 224.74 mo
( )sh
62.0689 236.29 mo
74.0689 236.29 li
74.0689 228.577 li
62.0689 228.577 li
cp
0 .490333 .803677 0 cmyk
ef
62.0689 236.29 mo
74.0689 236.29 li
74.0689 228.577 li
62.0689 228.577 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
96.2609 241.29 mo
107.17 241.29 li
107.17 233.577 li
96.2609 233.577 li
cp
0 .490333 .803677 0 cmyk
ef
96.2609 241.29 mo
107.17 241.29 li
107.17 233.577 li
96.2609 233.577 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
126.261 241.19 mo
137.17 241.19 li
137.17 233.477 li
126.261 233.477 li
cp
0 .490333 .803677 0 cmyk
ef
126.261 241.19 mo
137.17 241.19 li
137.17 233.477 li
126.261 233.477 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
111.761 241.35 mo
122.67 241.35 li
122.67 233.637 li
111.761 233.637 li
cp
0 .490333 .803677 0 cmyk
ef
111.761 241.35 mo
122.67 241.35 li
122.67 233.637 li
111.761 233.637 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
117.771 61.07 mo
129.771 61.07 li
129.771 53.3573 li
117.771 53.3573 li
cp
0 .490333 .803677 0 cmyk
ef
117.771 61.07 mo
129.771 61.07 li
129.771 53.3573 li
117.771 53.3573 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
301.831 30.48 mo
313.831 30.48 li
313.831 22.7673 li
301.831 22.7673 li
cp
0 .490333 .803677 0 cmyk
ef
301.831 30.48 mo
313.831 30.48 li
313.831 22.7673 li
301.831 22.7673 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
323.081 30 mo
335.081 30 li
335.081 22.2873 li
323.081 22.2873 li
cp
0 .490333 .803677 0 cmyk
ef
323.081 30 mo
335.081 30 li
335.081 22.2873 li
323.081 22.2873 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
323.081 86.51 mo
335.081 86.51 li
335.081 78.7973 li
323.081 78.7973 li
cp
0 .490333 .803677 0 cmyk
ef
323.081 86.51 mo
335.081 86.51 li
335.081 78.7973 li
323.081 78.7973 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
136.441 125.69 mo
148.441 125.69 li
148.441 117.977 li
136.441 117.977 li
cp
0 .490333 .803677 0 cmyk
ef
136.441 125.69 mo
148.441 125.69 li
148.441 117.977 li
136.441 117.977 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
541.641 133.63 mo
553.641 133.63 li
553.641 125.917 li
541.641 125.917 li
cp
0 .490333 .803677 0 cmyk
ef
541.641 133.63 mo
553.641 133.63 li
553.641 125.917 li
541.641 125.917 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
540.901 190.6 mo
552.901 190.6 li
552.901 182.887 li
540.901 182.887 li
cp
0 .490333 .803677 0 cmyk
ef
540.901 190.6 mo
552.901 190.6 li
552.901 182.887 li
540.901 182.887 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
131.201 238 mo
130.201 237.95 li
130.151 238.95 li
131.151 239 li
cp
129.261 237.88 mo
128.271 237.73 li
128.121 238.71 li
129.111 238.87 li
cp
127.341 237.53 mo
126.371 237.29 li
126.131 238.26 li
127.101 238.5 li
cp
125.461 236.99 mo
124.731 236.74 li
124.561 236.67 li
124.151 237.58 li
124.411 237.69 li
125.141 237.94 li
cp
123.641 236.26 mo
123.221 236.08 li
122.781 235.84 li
122.311 236.72 li
122.821 236.99 li
123.241 237.18 li
cp
121.901 235.37 mo
121.761 235.3 li
121.081 234.86 li
120.541 235.7 li
121.291 236.18 li
121.431 236.25 li
cp
120.281 234.33 mo
119.491 233.72 li
118.881 234.52 li
119.681 235.13 li
cp
118.761 233.11 mo
118.011 232.44 li
117.341 233.18 li
118.081 233.85 li
cp
117.351 231.74 mo
116.871 231.22 li
116.721 231.03 li
115.931 231.65 li
116.131 231.9 li
116.621 232.43 li
cp
116.101 230.24 mo
115.931 230.02 li
115.571 229.45 li
114.731 229.99 li
115.151 230.64 li
115.321 230.86 li
cp
115.091 228.65 mo
114.651 227.75 li
113.751 228.19 li
114.191 229.09 li
cp
114.271 226.86 mo
114.261 226.84 li
114.061 226.19 li
114.011 225.97 li
113.031 226.21 li
113.111 226.49 li
113.341 227.21 li
113.341 227.23 li
cp
113.801 225.02 mo
113.771 224.86 li
113.701 224.19 li
113.701 224.1 li
112.701 224.14 li
112.701 224.31 li
112.791 225.05 li
112.821 225.2 li
cp
113.711 223.16 mo
113.731 222.89 li
113.721 222.96 li
113.881 222.26 li
112.921 221.96 li
112.901 222.04 li
112.741 222.75 li
112.741 222.77 112.731 222.79 112.731 222.82 cv
112.711 223.08 li
cp
114.221 221.44 mo
114.451 220.99 li
114.691 220.62 li
113.851 220.08 li
113.561 220.54 li
113.331 220.99 li
cp
115.261 219.86 mo
115.381 219.71 li
115.911 219.15 li
115.171 218.47 li
114.601 219.09 li
114.481 219.24 li
cp
116.611 218.49 mo
116.671 218.43 li
117.351 217.87 li
116.721 217.1 li
116.001 217.7 li
115.931 217.76 li
cp
118.131 217.29 mo
118.301 217.18 li
118.941 216.74 li
118.391 215.91 li
117.701 216.37 li
117.541 216.49 li
cp
119.771 216.23 mo
120.211 215.96 li
120.621 215.74 li
120.141 214.86 li
119.701 215.11 li
119.261 215.37 li
cp
121.491 215.28 mo
122.381 214.83 li
121.931 213.94 li
121.041 214.39 li
cp
123.271 214.42 mo
123.611 214.26 li
124.181 214.02 li
123.781 213.1 li
123.191 213.36 li
122.861 213.51 li
cp
125.091 213.64 mo
126.021 213.28 li
125.651 212.34 li
124.721 212.71 li
cp
126.941 212.94 mo
127.521 212.74 li
127.881 212.62 li
127.561 211.67 li
127.191 211.79 li
126.611 212 li
cp
128.831 212.31 mo
128.921 212.27 li
129.771 212.02 li
129.481 211.06 li
128.611 211.33 li
128.511 211.36 li
cp
130.711 211.75 mo
131.681 211.49 li
131.431 210.53 li
130.461 210.78 li
cp
132.651 211.24 mo
133.391 211.05 li
133.601 211 li
133.391 210.02 li
133.141 210.08 li
132.401 210.27 li
cp
134.571 210.79 mo
135.551 210.58 li
135.341 209.6 li
134.361 209.81 li
cp
136.531 210.37 mo
136.541 210.37 li
137.491 210.21 li
137.331 209.22 li
136.331 209.39 li
136.321 209.39 li
cp
138.481 210.05 mo
139.471 209.88 li
139.301 208.89 li
138.321 209.06 li
cp
140.431 209.75 mo
141.431 209.63 li
141.311 208.64 li
140.321 208.76 li
cp
142.421 209.52 mo
143.131 209.43 li
143.391 209.41 li
143.321 208.42 li
143.011 208.44 li
142.301 208.52 li
cp
144.391 209.34 mo
145.391 209.26 li
145.311 208.27 li
144.321 208.34 li
cp
146.381 209.19 mo
146.521 209.18 li
147.361 209.16 li
147.331 208.16 li
146.451 208.18 li
146.311 208.19 li
cp
148.361 209.14 mo
149.361 209.11 li
149.331 208.11 li
148.331 208.14 li
cp
150.331 209.11 mo
151.331 209.13 li
151.361 208.13 li
150.361 208.11 li
cp
152.331 209.16 mo
153.331 209.18 li
153.361 208.18 li
152.361 208.16 li
cp
154.311 209.25 mo
155.301 209.32 li
155.371 208.32 li
154.381 208.25 li
cp
156.301 209.39 mo
156.751 209.42 li
157.271 209.48 li
157.391 208.49 li
156.821 208.42 li
156.371 208.39 li
cp
158.271 209.6 mo
159.261 209.71 li
159.381 208.72 li
158.381 208.6 li
cp
160.231 209.83 mo
161.221 209.99 li
161.381 209 li
160.391 208.84 li
cp
162.211 210.15 mo
163.191 210.31 li
163.351 209.33 li
162.371 209.16 li
cp
164.151 210.5 mo
165.131 210.71 li
165.331 209.73 li
164.351 209.52 li
cp
166.111 210.91 mo
166.491 210.98 li
167.061 211.13 li
167.311 210.16 li
166.691 210.01 li
166.311 209.93 li
cp
168.031 211.38 mo
169.001 211.62 li
169.251 210.65 li
168.281 210.41 li
cp
169.951 211.88 mo
170.911 212.16 li
171.191 211.2 li
170.231 210.92 li
cp
171.851 212.46 mo
172.351 212.62 li
172.791 212.77 li
173.111 211.83 li
172.651 211.67 li
172.151 211.51 li
cp
173.721 213.09 mo
174.661 213.44 li
175.011 212.51 li
174.071 212.16 li
cp
175.571 213.81 mo
176.261 214.1 li
176.481 214.19 li
176.881 213.28 li
176.651 213.18 li
175.951 212.89 li
cp
177.391 214.6 mo
177.461 214.63 li
178.281 215.03 li
178.721 214.13 li
177.861 213.71 li
177.801 213.68 li
cp
179.151 215.48 mo
179.671 215.75 li
180.011 215.95 li
180.511 215.08 li
180.131 214.86 li
179.621 214.59 li
cp
180.851 216.45 mo
181.591 216.92 li
181.671 216.98 li
182.251 216.16 li
182.121 216.07 li
181.391 215.61 li
cp
182.461 217.55 mo
183.211 218.14 li
183.221 218.15 li
183.891 217.41 li
183.831 217.36 li
183.081 216.76 li
cp
183.931 218.8 mo
184.501 219.38 li
184.591 219.5 li
185.361 218.86 li
185.221 218.69 li
184.651 218.1 li
cp
185.181 220.25 mo
185.441 220.64 li
185.661 221.06 li
186.541 220.59 li
186.271 220.08 li
186.001 219.69 li
cp
185.991 221.86 mo
186.141 222.49 li
186.131 222.41 li
186.151 222.77 li
187.151 222.69 li
187.121 222.34 li
187.121 222.31 187.121 222.29 187.111 222.26 cv
186.971 221.64 li
cp
186.161 223.67 mo
186.081 224.34 li
186.021 224.63 li
187.001 224.81 li
187.071 224.46 li
187.151 223.79 li
cp
185.801 225.57 mo
185.791 225.62 li
185.581 226.26 li
185.501 226.45 li
186.421 226.83 li
186.531 226.56 li
186.761 225.87 li
186.771 225.82 li
cp
185.091 227.32 mo
184.691 228.13 li
184.661 228.16 li
185.501 228.71 li
185.581 228.58 li
185.991 227.77 li
cp
184.111 228.99 mo
183.901 229.32 li
183.551 229.76 li
184.331 230.38 li
184.731 229.87 li
184.951 229.54 li
cp
182.951 230.5 mo
182.251 231.21 li
182.971 231.91 li
183.671 231.2 li
cp
181.561 231.88 mo
180.801 232.53 li
181.461 233.29 li
182.211 232.63 li
cp
180.041 233.11 mo
179.441 233.55 li
179.261 233.67 li
179.781 234.52 li
180.041 234.36 li
180.631 233.91 li
cp
178.411 234.19 mo
178.071 234.4 li
177.571 234.66 li
178.031 235.55 li
178.591 235.25 li
178.931 235.04 li
cp
176.681 235.12 mo
176.611 235.15 li
175.791 235.49 li
176.181 236.42 li
177.071 236.04 li
177.141 236.01 li
cp
174.901 235.85 mo
173.951 236.17 li
174.271 237.11 li
175.221 236.8 li
cp
173.031 236.42 mo
172.061 236.65 li
172.291 237.63 li
173.261 237.4 li
cp
171.121 236.8 mo
170.291 236.92 li
170.171 236.92 li
170.221 237.92 li
170.441 237.91 li
171.261 237.79 li
cp
175.221 233.24 mo
168.681 237.5 li
175.601 241.09 li
175.841 241.22 176.151 241.13 176.271 240.88 cv
176.401 240.64 176.311 240.33 176.061 240.21 cv
169.901 237 li
169.941 237.87 li
175.761 234.08 li
175.991 233.93 176.061 233.62 175.911 233.39 cv
175.761 233.15 175.451 233.09 175.221 233.24 cv
cp
.740688 .455604 .0273442 0 cmyk
f
287.771 253.14 mo
325.271 253.14 li
325.271 229.343 li
287.771 229.343 li
cp
.721096 .438056 .0239261 0 cmyk
ef
287.771 253.14 mo
325.271 253.14 li
325.271 229.343 li
287.771 229.343 li
cp
.858823 .646754 .238682 .0613413 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
297.591 247.3 mo
(T1)
[8.75998 0 ]xsh
315.471 247.3 mo
( )sh
325.291 241.74 mo
341.141 241.23 li
341.111 240.23 li
325.251 240.74 li
cp
335.511 244.85 mo
342.121 240.7 li
335.261 236.99 li
335.021 236.86 334.711 236.95 334.581 237.19 cv
334.451 237.43 334.541 237.73 334.781 237.87 cv
340.891 241.17 li
340.861 240.31 li
334.981 244 li
334.741 244.15 334.671 244.45 334.821 244.69 cv
334.971 244.92 335.271 244.99 335.511 244.85 cv
cp
.740688 .455604 .0273442 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
WVTSUW+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A0860A34D75BA8453DBFB814014C0C4728DA471D5EF3
791FA4240EB1CC5BF59A5FA3487E2F0E763DAE46F0DA05A89110163D83524D7E
A404AA647CFB8B0BF18B885098268812056B970352E34734EFB8EA99DA80F13C
7EFBAAE9ADBB45CD604BFF3A39C9CC7A0A83927D7D5A4B2E75D06E370927DFBA
451037A06D79A6A428CAC7E4423B70CA5D5D84E759135799161CA6E3C2209FA7
2A04B7CEE79D2AC2B53CAC28C9C6BE5E7D7175AE6E2CDBF62577563D698630AB
A357964D6FFA816FE517BCC518B9BCEDB14F7DE18A518BCAEFF1096D5DA42B50
3A93BE53FF4096FBA3F5C24B50D0262930A71DE4A30874070C74699A09A6A247
94006AC9B7A896C548D6B8A51F3AEA75D328845EEB09204FA41C0B74E70ABFB1
182501534524562F70E09292D6FA1A2C8E6C1FD060E3FBD2AF40CE1DF48002A1
4BE258ED46D903FA50D027660F585DE036DCF220923D5C07205E776E7E63A964
5C94249B49895A3F8BA08BA0FB2447F849C17ADA529360F3F87B59DDD9C8CE3F
87CCDE20932F0C0C3CA7CC03F3A3737BDDA3DE2F37B11A6A44911E362A1E35F4
3EA93B84A7F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
WVTSUW+Calibri /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/WVTSUW+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /.notdef /eight 3{/.notdef}rp /less /equal /greater 
4{/.notdef}rp /C /D 11{/.notdef}rp /P 3{/.notdef}rp /T 3{/.notdef}rp 
/X 167{/.notdef}rp]
WVTSUW+Calibri nf
WVTSUW+Calibri*1 [18 0 0 -18 0 0 ]msf
277.021 227.3 mo
(CDP8)
[9.59409 11.0701 9.21597 0 ]xsh
316.021 227.3 mo
( )sh
346.971 244.86 mo
358.971 244.86 li
358.971 237.147 li
346.971 237.147 li
cp
0 .490333 .803677 0 cmyk
ef
346.971 244.86 mo
358.971 244.86 li
358.971 237.147 li
346.971 237.147 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
362.211 244.86 mo
373.12 244.86 li
373.12 237.147 li
362.211 237.147 li
cp
0 .490333 .803677 0 cmyk
ef
362.211 244.86 mo
373.12 244.86 li
373.12 237.147 li
362.211 237.147 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
402.631 244.76 mo
413.54 244.76 li
413.54 237.047 li
402.631 237.047 li
cp
0 .490333 .803677 0 cmyk
ef
402.631 244.76 mo
413.54 244.76 li
413.54 237.047 li
402.631 237.047 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
377.711 244.93 mo
388.62 244.93 li
388.62 237.217 li
377.711 237.217 li
cp
0 .490333 .803677 0 cmyk
ef
377.711 244.93 mo
388.62 244.93 li
388.62 237.217 li
377.711 237.217 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
406.551 227.91 mo
407.881 226.4 li
409.361 225.01 li
410.931 223.81 li
412.601 222.78 li
414.341 221.93 li
416.151 221.27 li
417.081 221 li
418.011 220.79 li
418.951 220.62 li
419.891 220.49 li
420.851 220.41 li
421.791 220.38 li
422.751 220.4 li
423.711 220.47 li
424.661 220.57 li
425.611 220.73 li
426.541 220.93 li
427.481 221.19 li
428.401 221.5 li
429.311 221.84 li
430.221 222.24 li
431.101 222.69 li
431.971 223.18 li
432.821 223.72 li
433.651 224.32 li
434.461 224.96 li
435.961 226.35 li
437.301 227.87 li
438.471 229.49 li
439.461 231.22 li
440.281 233.01 li
440.931 234.86 li
441.391 236.77 li
441.681 238.7 li
441.791 240.66 li
441.711 242.62 li
441.601 243.62 li
441.451 244.59 li
441.251 245.55 li
441.011 246.51 li
440.721 247.47 li
440.381 248.4 li
439.991 249.33 li
439.561 250.24 li
439.081 251.14 li
438.551 252.01 li
437.981 252.87 li
437.351 253.7 li
436.001 255.25 li
434.531 256.63 li
432.951 257.84 li
431.281 258.86 li
429.541 259.71 li
427.731 260.37 li
426.811 260.64 li
425.881 260.86 li
424.941 261.03 li
423.991 261.15 li
423.041 261.23 li
422.091 261.26 li
421.131 261.24 li
420.181 261.18 li
419.231 261.07 li
418.291 260.92 li
417.341 260.71 li
416.411 260.45 li
415.481 260.16 li
414.571 259.8 li
413.671 259.4 li
412.791 258.96 li
411.921 258.47 li
411.061 257.92 li
410.231 257.33 li
409.421 256.68 li
408.071 255.44 li
406.831 254.07 li
405.711 252.59 li
405.251 251.85 li
406.111 251.32 li
406.511 251.98 li
407.571 253.4 li
408.751 254.7 li
410.051 255.9 li
410.811 256.51 li
411.601 257.08 li
412.411 257.59 li
413.241 258.06 li
414.081 258.49 li
414.931 258.87 li
415.791 259.2 li
416.671 259.49 li
417.551 259.73 li
418.451 259.93 li
419.351 260.08 li
420.241 260.19 li
421.151 260.25 li
422.061 260.26 li
422.961 260.23 li
423.861 260.16 li
424.761 260.04 li
425.651 259.88 li
426.531 259.68 li
427.391 259.44 li
429.111 258.81 li
430.761 258.01 li
432.341 257.04 li
433.841 255.9 li
435.251 254.59 li
436.551 253.1 li
437.141 252.31 li
437.701 251.49 li
438.201 250.67 li
438.651 249.81 li
439.071 248.95 li
439.441 248.07 li
439.761 247.17 li
440.041 246.27 li
440.271 245.35 li
440.461 244.43 li
440.611 243.51 li
440.711 242.58 li
440.791 240.72 li
440.691 238.85 li
440.421 237.01 li
439.981 235.19 li
439.371 233.42 li
438.601 231.71 li
437.661 230.08 li
436.551 228.53 li
435.281 227.08 li
433.841 225.74 li
433.071 225.13 li
432.281 224.57 li
431.481 224.05 li
430.651 223.58 li
429.811 223.15 li
428.961 222.78 li
428.091 222.44 li
427.211 222.15 li
426.331 221.91 li
425.441 221.72 li
424.541 221.57 li
423.631 221.46 li
422.731 221.4 li
421.831 221.38 li
420.931 221.41 li
420.021 221.48 li
419.121 221.6 li
418.231 221.76 li
417.361 221.96 li
416.491 222.21 li
414.781 222.83 li
413.121 223.63 li
411.541 224.6 li
410.041 225.74 li
408.631 227.05 li
407.311 228.57 li
cp
405.351 258.54 mo
405.161 250.74 li
412.041 254.41 li
412.291 254.54 412.381 254.85 412.251 255.09 cv
412.121 255.33 411.821 255.42 411.571 255.29 cv
405.441 252.02 li
406.181 251.57 li
406.351 258.51 li
406.361 258.79 406.141 259.02 405.861 259.03 cv
405.591 259.03 405.361 258.82 405.351 258.54 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
434.971 235.53 mo
476.891 235.53 li
476.891 228.93 li
490.101 242.14 li
476.891 255.34 li
476.891 248.74 li
434.971 248.74 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
434.971 235.53 mo
476.891 235.53 li
476.891 228.93 li
490.101 242.14 li
476.891 255.34 li
476.891 248.74 li
434.971 248.74 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
439.101 246.24 mo
451.101 246.24 li
451.101 238.527 li
439.101 238.527 li
cp
.438849 .103182 .835325 0 cmyk
ef
1 lj
439.101 246.24 mo
451.101 246.24 li
451.101 238.527 li
439.101 238.527 li
cp
.589868 .296208 .953368 .106538 cmyk
@
454.341 246.24 mo
465.25 246.24 li
465.25 238.527 li
454.341 238.527 li
cp
.438849 .103182 .835325 0 cmyk
ef
454.341 246.24 mo
465.25 246.24 li
465.25 238.527 li
454.341 238.527 li
cp
.589868 .296208 .953368 .106538 cmyk
@
469.841 246.3 mo
480.75 246.3 li
480.75 238.587 li
469.841 238.587 li
cp
.438849 .103182 .835325 0 cmyk
ef
469.841 246.3 mo
480.75 246.3 li
480.75 238.587 li
469.841 238.587 li
cp
.589868 .296208 .953368 .106538 cmyk
@
333.401 244.26 mo
344.31 244.26 li
344.31 236.547 li
333.401 236.547 li
cp
0 .490333 .803677 0 cmyk
ef
333.401 244.26 mo
344.31 244.26 li
344.31 236.547 li
333.401 236.547 li
cp
.234195 .620478 .94818 .0894484 cmyk
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/WVTSUX+Calibri*1 uf
/WVTSUX+Calibri uf
/HIBBAA+Calibri uf
/WVTSUW+Calibri*1 uf
/WVTSUW+Calibri uf
/WGJAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
